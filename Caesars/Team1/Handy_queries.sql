----------------------------------Handy Proc---------------------------
--Table Backup: (Run wherever the backup requires – DEV/QA/UAT/PROD)
--Syntax  :- 
CALL DAAS_SECURITY.CLONE_TABLE_PROC('SourceDB','TargetDB','SchemaName','TableName',NULL,NULL);
--Eg :- 
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_UAT','DAAS_UAT','DAAS_CORE','TRIP_MERGE_QUEUE',NULL,NULL);
--Eg-output,. TRIP_MERGE_QUEUE_20231123 


--Clone Table from UAT to PROD: (Should run in PROD env)
--Syntax  :- 
CALL DAAS_PROD .DAAS_SECURITY.CLONE_TABLE_PROC('<SourceDB>','TargetDB','SchemaName','TableName',NULL, 'CLONE_FROM_UAT_TO_PROD_REQUIRED');
--Eg        :- 
CALL DAAS_PROD.DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_UAT', 'DAAS_PROD', 'DAAS_RAW_PDB', 'GST_ID_XREF_RAW', NULL,'CLONE_FROM_UAT_TO_PROD_REQUIRED');
Output:- Table will clone from UAT env to PROD env. 


--Clone Table from PROD to UAT: (Should run in UAT env)
--Syntax :- 
CALL DAAS_UAT.DAAS_SECURITY.CLONE_TABLE_PROC('<SourceDB>','TargetDB','SchemaName','TableName',NULL, 'CLONE FROM PROD TO UAT');
--Eg :- 
CALL DAAS_UAT.DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD','DAAS_UAT','DAAS_RAW_HETCMS', 'CMPRA_RAW', NULL, 'CLONE FROM PROD TO UAT');


--Recreate “Regular” Stream:
--Syntax  :- 
CALL DAAS_COMMON.CREATE_OR_REPLACE_STREAM ('<SourceSchema>','SourceTable','TargetSchema','StreamName',NULL);
--Eg :- 
CALL DAAS_COMMON.CREATE_OR_REPLACE_STREAM('DAAS_RAW_HETCMS', 'CMPRA_RAW', 'DAAS_RAW_HETCMS', 'CMPRA_RAW_STREAM', NULL);


--Recreate “Append Only” Stream:
--Syntax  :- 
CALL DAAS_ COMMON.CREATE_OR_REPLACE_STREAM ('<SourceSchema>', 'SourceTable', 'TargetSchema', 'StreamName', 'APPEND_ONLY');
--Eg :- 
CALL DAAS_COMMON.CREATE_OR_REPLACE_STREAM('DAAS_RAW_HETCMS', 'CMPDA_RAW', 'DAAS_RAW_HETCMS', 'CMPDA_RAW_APPEND_ONLY_STREAM', 'APPEND_ONLY');

--Run any SQL using adhoc Proc
CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('sql_query');
--Note escape character in place of ' like \'

--Replay Proc
CALL DAAS_COMMON..DATA_REPLAY_PROC('<schema_name>','table_name','where_condition','comment','');

CALL DAAS_COMMON.DATA_REPLAY_PROC('DAAS_CORE', 'RATINGS_FACT', 
'WHERE RATINGS_FACT_SK IN 
(SELECT RATINGS_FACT_SK FROM DAAS_CORE_GAMING_VW.RATINGS_FACT_VW 
WHERE GUEST_UNIQUE_ID IN (SELECT DISTINCT GUEST_UNIQUE_ID FROM DAAS_TEMP.METRIC_GUID))', 
'METRICS_MISMATCHES', 1000000000);

-------------------------------Job warehouse time--------------------------------
--Increase Job warehouse to 2XL
CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('UPDATE DAAS_COMMON.JOB
SET WAREHOUSE_NAME = 'DAAS_UAT_ADHOC_BULK_LOAD_COMPUTE_2XL'
WHERE JOB_ID IN (731, 525, 637, 638, 657, 656, 654, 653, 523, 526, 527, 532, 528, 529, 655)');
 
--Reverting Job Warehouse to Original L
UPDATE DAAS_COMMON.JOB
SET WAREHOUSE_NAME = 'DAAS_UAT_IT_WHSRCTORAW_COMPUTE'
WHERE JOB_ID IN (731, 525, 637, 638, 657, 656, 654, 653, 523, 526, 527, 532, 528, 529, 655);

---------------------------------------CHECK TASK STATUS------------------------------------------
select *
from table(information_schema.task_history(
scheduled_time_range_start=>dateadd('hour',-1,current_timestamp()),
result_limit => 10,
task_name=>'TRIP_ROOT_TASK'));

------CHECK WAREHOUSE RUNNING WHICH QUERY
SELECT * FROM TABLE(INFORMATION_SCHEMA.QUERY_HISTORY_BY_WAREHOUSE(WAREHOUSE_NAME=>'DAAS_UAT_ADHOC_BULK_LOAD_COMPUTE_2XL')) 
WHERE USER_NAME = 'SYSTEM' 
ORDER BY START_TIME DESC;

---------------------------trip backup--------------------------
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'DAILY_ACTIVITY_SUMMARY', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_SUMMARY', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_DETAIL', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MASTER', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MERGE_PROCESSED', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MERGE_QUEUE', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_RECALC_PROCESSED', NULL ,NULL);
CALL DAAS_UAT.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_RECALC_QUEUE', NULL ,NULL);

--To take table backups till UAT, pls use as shown below
 
Syntax:
CALL DAAS_COMMON.TABLE_BACKUP_PROC(SOURCE_DATABASE_NAME, SOURCE_SCHEMA_NAME, SOURCE_TABLE_NAME, TARGET_DATABASE_NAME, TARGET_SCHEMA_NAME, TARGET_TABLE_NAME);

Ex:
CALL DAAS_COMMON.TABLE_BACKUP_PROC('DAAS_DEV', 'DAAS_CORE', 'TRIP_RECALC', 'DAAS_DEV', 'DAAS_TEMP', 'TRIP_RECALC_20240311');


-------------------------------EXECUTE ON-DEMAND TASK----------------------------
EXECUTE TASK DAAS_COMMON.TRIP_FILTERED_TXNS_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_RATING_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_HOTEL_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_POS_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_OFFER_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_COMP_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MARKERS_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_FREEPLAY_DOMAIN_PIPELINE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_RECALCULATION_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_CHECK_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_GUEST_GUESTXREF_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_TRIP_MASTER_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_INACTIVE_TXNS_ARCHIVAL_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_SUMMARY_WRAPPER_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_SUMMARY_POS_TENDER_LOAD_ONDEMAND_TASK;

-----Resume all child task
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_FILTERED_TXNS_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_RATING_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_HOTEL_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_POS_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_OFFER_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_COMP_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_MARKERS_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_FREEPLAY_DOMAIN_PIPELINE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_RECALCULATION_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_MERGE_CHECK_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_MERGE_CHECK_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_CUSTOMER_MERGE_CHECK_GUEST_GUESTXREF_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_CUSTOMER_MERGE_CHECK_TRIP_MASTER_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_CUSTOMER_MERGE_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_INACTIVE_TXNS_ARCHIVAL_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_SUMMARY_LOAD_TASK RESUME;
ALTER TASK DAAS_COMMON.CORE2CORE_TRIP_SUMMARY_POS_TENDER_LOAD_TASK RESUME;

-------------------KILL TASK----------------
select system$user_task_cancel_ongoing_executions('DAAS_COMMON.CORE2CORE_TRIP_SUMMARY_LOAD_TASK');

---Replay
CALL DAAS_COMMON.DATA_REPLAY_PROC('DAAS_CORE','TRIP_DETAIL',$$WHERE TRANSACTION_TYPE IN('POS','HOTEL')$$,'TRIP_NG_REVENUE_SUMMARY_LOAD',2000000000);

Syntax:
CALL DAAS_COMMON.TABLE_BACKUP_PROC(SOURCE_DATABASE_NAME, SOURCE_SCHEMA_NAME, SOURCE_TABLE_NAME, TARGET_DATABASE_NAME, TARGET_SCHEMA_NAME, TARGET_TABLE_NAME);
 
Ex:
CALL DAAS_COMMON.TABLE_BACKUP_PROC('DAAS_DEV', 'DAAS_CORE', 'TRIP_RECALC', 'DAAS_DEV', 'DAAS_TEMP', 'TRIP_RECALC_20240311');


SELECT * FROM DAAS_CORE.TRIP_MASTER TM
JOIN DAAS_CORE.TRIP_DETAIL TD
ON TM.TRIP_MASTER_ID = TD.TRIP_MASTER_ID
WHERE GUEST_UNIQUE_ID = 
AND DATE(TRANSACTION_START_DTTM) = ''
AND TRANSACTION_TYPE = '';
--
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('ACSC_JACKPOT_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('ACSC_SLOT_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('ACSC_TABLE_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('CMS7_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('HETCMS_OTHER_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('HETCMS_TABLE_RATINGS_FACT_HIST', '', 'RAW TO CORE');
CALL DAAS_COMMON.BATCH_CONTROL_DATA_LOAD_WRAPPER_PROC('HETCMS_SLOT_RATINGS_FACT_HIST', '', 'RAW TO CORE');

CALL DAAS_PROD.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD','DAAS_CORE','DIGITAL_TRANSACTIONS_FACT', 'DAAS_UAT','DAAS_CORE','DIGITAL_TRANSACTIONS_FACT',NULL);
CALL DAAS_PROD.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD','DAAS_CORE','DIGITAL_GUEST_XREF_BRIDGE_LKP', 'DAAS_UAT','DAAS_CORE','DIGITAL_GUEST_XREF_BRIDGE_LKP',NULL);
CALL DAAS_PROD.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD','DAAS_STG_IGAMING','BRAND_VALIDATION', 'DAAS_UAT','DAAS_STG_IGAMING','BRAND_VALIDATION',NULL);
CALL DAAS_PROD.DAAS_COMMON.CLONE_TABLE_PROC('DAAS_PROD','DAAS_TEMP','DAILY_ACTIVITY_SUMMARY_DIGITAL_PLAY_TEMP_DTF', 'DAAS_UAT','DAAS_TEMP','DAILY_ACTIVITY_SUMMARY_DIGITAL_PLAY_TEMP_DTF',NULL);


DAAS_CORE_GAMING_VW.RATINGS_FACT_VW
DAAS_CORE_POS_VW.CHECK_SALES_FACT_VW
DAAS_CORE_HOTEL_VW.HOTEL_GUEST_RESERVATIONS_FACT_VW
DAAS_CORE_MARKETING_VW.OFFER_LEDGER_FACT_TRIP_GUEST_UNIQUE_ID_VW
DAAS_CORE_GAMING_VW.COMP_DETAIL_FACT_VW
DAAS_CORE_GAMING_VW.CAGE_TRANSACTION_ISSUE_DETAIL_FACT_VW
DAAS_CORE_GAMING_VW.COMP_FREE_PLAY_DETAIL_FACT_VW
DAAS_CORE.DIGITAL_GUEST_XREF_BRIDGE_LKP