---------------------------------------------------
Steps to clean-up extra Offers SKs in TRIP_DETAIL
---------------------------------------------------

•	Suspend Raw2Core Task for Offers
•	Execute TRIP_ROOT_TASK to consume data from the stream
•	Take backup of Trip tables
•	Capture the corresponding SKs for the discrepancy guests into temp table
•	Void those SKs from the detail table
•	Insert the corresponding Trip_Master_IDs for the guests into TRIP_RECALC_QUEUE
•	Run the procs from Trip Recalc till summary/Execute TRIP_ROOT_TASK to cleanup these SKs
•	Ensure there is no more discrepency
•	Run the trip validation query for offers domain
•	Compare TRIP_DETAIL table with OFFER_LEDGER_FACT_TRIP_VW to identify if any eligible SKs are not processed
•	Re-process if any


-- Step 1:- Suspend Raw2Core Task for Offers [Thru Aggregared Role]

ALTER TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_FACT_TASK SUSPEND;


-- Step 2:- Execute TRIP_ROOT_TASK to consume data from the stream [Thru Aggregared Role]

EXECUTE TASK DAAS_COMMON.TRIP_ROOT_TASK;


-- Step 3:- Take backup of Trip tables [Thru Standardized Proc - BACKUP_TABLE_PROC]

CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_DETAIL', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_MASTER', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_SUMMARY', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'DAILY_ACTIVITY_SUMMARY', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_MERGE_PROCESSED', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_MERGE_QUEUE', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_RECALC_PROCESSED', 'DAAS_UAT', NULL);
CALL DAAS_COMMON.BACKUP_TABLE_PROC('DAAS_UAT', 'DAAS_CORE', 'TRIP_RECALC_QUEUE', 'DAAS_UAT', NULL);



-- Step 4:- Run the Adhoc proc to perform below activities

CALL DAAS_ADHOC.TRIP_OFFERS_EXTRA_SKS_ADHOC_REQUEST_PROC();

/*
-- Capture the corresponding SKs for the discrepancy guests into temp table [Thru Adhoc Proc]

CREATE TABLE DAAS_TEMP.OFFERS_EXTRA_SKS_CLEANUP_GUESTS AS
SELECT DISTINCT TM.GUEST_UNIQUE_ID, TD.TRANSACTION_TABLE_SK 
FROM DAAS_CORE.TRIP_DETAIL TD
JOIN DAAS_CORE.TRIP_MASTER TM
ON TD.TRIP_MASTER_ID = TM.TRIP_MASTER_ID
WHERE TRANSACTION_TABLE_SK NOT IN (SELECT DISTINCT OFFER_LEDGER_FACT_SK FROM DAAS_CORE_MARKETING_VW.OFFER_LEDGER_FACT_TRIP_VW)
AND TD.TRANSACTION_TYPE = 'OFFER'
AND TM.DELETE_IND = 'N'
AND TD.DELETE_IND = 'N';


-- Distinct Guests 	-> 	 
-- Distinct SKs		-> 


-- Void those SKs from the detail table [Thru Adhoc Proc]

UPDATE DAAS_CORE.TRIP_DETAIL
SET DELETE_IND = 'Y', TRANSACTION_SUB_TYPE = 'VOIDED'
WHERE TRANSACTION_TABLE_SK IN (SELECT DISTINCT TRANSACTION_TABLE_SK FROM DAAS_TEMP.OFFERS_EXTRA_SKS_CLEANUP_GUESTS)
AND TRANSACTION_TYPE = 'OFFER';


-- Insert the corresponding Trip_Master_IDs for the guests into TRIP_RECALC_QUEUE [Thru Adhoc Proc]

INSERT INTO DAAS_CORE.TRIP_RECALC_QUEUE
( 
	TRIP_MASTER_ID,
	STATUS,
	BATCH_ID,
	CREATED_DTTM,
	CREATED_BY,
	UPDATED_DTTM,
	UPDATED_BY 
)
SELECT 
	TM.TRIP_MASTER_ID,
	'PENDING' AS STATUS,
	20230823,
	CURRENT_TIMESTAMP AS CREATED_DTTM,
	CURRENT_USER AS CREATED_BY,
	CURRENT_TIMESTAMP AS UPDATED_DTTM,
	CURRENT_USER AS UPDATED_BY
FROM
	DAAS_CORE.TRIP_MASTER TM
WHERE 
	TM.GUEST_UNIQUE_ID IN (SELECT DISTINCT GUEST_UNIQUE_ID FROM DAAS_TEMP.OFFERS_EXTRA_SKS_CLEANUP_GUESTS)
AND TM.DELETE_IND = 'N'; -- 

*/


-- Step 5:- Execute OnDemand tasks from Recalc to Trip Summary to cleanup these SKs [Thru OnDemand Tasks]

EXECUTE TASK DAAS_COMMON.TRIP_RECALCULATION_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_CHECK_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_GUEST_GUESTXREF_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_TRIP_MASTER_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_SUMMARY_POS_TENDER_AMT_LOAD_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_SUMMARY_WRAPPER_ONDEMAND_TASK;



-- Step 6:- Ensure there is no more discrepency (Validation)

SELECT COUNT(*) 
FROM DAAS_CORE.TRIP_DETAIL TD
JOIN DAAS_CORE.TRIP_MASTER TM
ON TD.TRIP_MASTER_ID = TM.TRIP_MASTER_ID
WHERE TRANSACTION_TABLE_SK NOT IN (SELECT DISTINCT OFFER_LEDGER_FACT_SK FROM DAAS_CORE_MARKETING_VW.OFFER_LEDGER_FACT_TRIP_VW)
AND TD.TRANSACTION_TYPE = 'OFFER'
AND TM.DELETE_IND = 'N'
AND TD.DELETE_IND = 'N';


SELECT COUNT(*)
FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TYPE = 'OFFER' 
AND TRANSACTION_TABLE_SK NOT IN 
(SELECT OFFER_LEDGER_FACT_SK FROM DAAS_CORE.OFFER_LEDGER_FACT
UNION 
SELECT OFFER_LEDGER_FACT_SK FROM DAAS_CORE_.OFFER_LEDGER_FACT_HISTORY); 



-- Run the trip validation query for offer domain

SELECT
	TRIP_TYPE,
	SUM(OFFER_CASH_COST) AS OFFER_CASH_COST,
	SUM(OFFER_HOTEL_COST) AS OFFER_HOTEL_COST,
	SUM(OFFER_RC_COST) AS OFFER_RC_COST,
	SUM(OFFER_OTHER_COST) AS OFFER_OTHER_COST,
	SUM(OFFER_FSP_COST) AS OFFER_FSP_COST,
	SUM(OFFER_TOTAL_COST) AS OFFER_TOTAL_COST,
	SUM(OFFER_NBR_CASH_COUPONS) AS OFFER_NBR_CASH_COUPONS,
	SUM(OFFER_NBR_HOTEL_COUPONS) AS OFFER_NBR_HOTEL_COUPONS,
	SUM(OFFER_NBR_RC_COUPONS) AS OFFER_NBR_RC_COUPONS,
	SUM(OFFER_NBR_OTHER_COUPONS) AS OFFER_NBR_OTHER_COUPONS,
	SUM(OFFER_NBR_FSP_COUPONS) AS OFFER_NBR_FSP_COUPONS,
	SUM(OFFER_NBR_TOTAL_COUPONS) AS OFFER_NBR_TOTAL_COUPONS,
	SUM(OFFER_DM_REEL_REWARDS_COST) AS OFFER_DM_REEL_REWARDS_COST,
	SUM(OFFER_EMAIL_REEL_REWARDS_COST) AS OFFER_EMAIL_REEL_REWARDS_COST,
	SUM(OFFER_NBR_DM_REEL_REWARDS) AS OFFER_NBR_DM_REEL_REWARDS,
	SUM(OFFER_NBR_EMAIL_REEL_REWARDS) AS OFFER_NBR_EMAIL_REEL_REWARDS,
	SUM(OFFER_CASH_REDEEM_AMT) AS OFFER_CASH_REDEEM_AMT,
	SUM(OFFER_HOTEL_REDEEM_AMT) AS OFFER_HOTEL_REDEEM_AMT,
	SUM(OFFER_RC_REDEEM_AMT) AS OFFER_RC_REDEEM_AMT,
	SUM(OFFER_OTHER_REDEEM_AMT) AS OFFER_OTHER_REDEEM_AMT,
	SUM(OFFER_FSP_REDEEM_AMT) AS OFFER_FSP_REDEEM_AMT,
	SUM(OFFER_TOTAL_REDEEM_AMT) AS OFFER_TOTAL_REDEEM_AMT,
	SUM(OFFER_DRAWING_OTP_NBR_ENTRIES) AS OFFER_DRAWING_OTP_NBR_ENTRIES,
	SUM(OFFER_DRAWING_OTP_REDEEMED_AMT) AS OFFER_DRAWING_OTP_REDEEMED_AMT,
	SUM(OFFER_DRAWING_OTP_COST) AS OFFER_DRAWING_OTP_COST
FROM
	DAAS_CORE_MARKETING_VW.TRIP_SUMMARY_VW
WHERE
	MARKET_CD <> 'CH2'
GROUP BY 
    TRIP_TYPE
;


-- Compare TRIP_DETAIL table with OFFER_LEDGER_FACT_TRIP_VW to identify if any eligible SKs not processed

SELECT DISTINCT OFFER_LEDGER_FACT_SK
FROM DAAS_CORE_MARKETING_VW.OFFER_LEDGER_FACT_TRIP_VW VW
WHERE OFFER_LEDGER_FACT_SK NOT IN 
(
	SELECT DISTINCT TRANSACTION_TABLE_SK
	FROM DAAS_CORE.TRIP_DETAIL TD
	JOIN DAAS_CORE.TRIP_MASTER TM
	ON TD.TRIP_MASTER_ID = TM.TRIP_MASTER_ID
	WHERE TM.DELETE_IND = 'N'
	AND TD.DELETE_IND = 'N'
	AND TD.TRANSACTION_TYPE = 'OFFER'
);

-- Replay if any





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--																				Backout Steps
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1) Delete inserted data from DAAS_CORE.TRIP_RECALC_QUEUE

DELETE FROM DAAS_CORE.TRIP_RECALC_QUEUE
WHERE BATCH_ID = 20230703; -- 148,457,307


2) Check the count in Stream

SELECT COUNT(*) FROM DAAS_CORE.TRIP_RECALC_QUEUE_STREAM WHERE METADATA$ACTION = 'INSERT'; -- 0

-- CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('CREATE OR REPLACE STREAM DAAS_CORE.TRIP_RECALC_QUEUE_STREAM ON TABLE DAAS_CORE.TRIP_RECALC_QUEUE;');


3) Truncate trip tables

TRUNCATE TABLE DAAS_CORE.TRIP_DETAIL;
TRUNCATE TABLE DAAS_CORE.TRIP_MASTER;
TRUNCATE TABLE DAAS_CORE.TRIP_SUMMARY;
TRUNCATE TABLE DAAS_CORE.DAILY_ACTIVITY_SUMMARY;
TRUNCATE TABLE DAAS_CORE.TRIP_MERGE_PROCESSED; 
TRUNCATE TABLE DAAS_CORE.TRIP_MERGE_QUEUE;
TRUNCATE TABLE DAAS_CORE.TRIP_RECALC_PROCESSED;
TRUNCATE TABLE DAAS_CORE.TRIP_RECALC_QUEUE;


4) Restore back from backup tables

INSERT INTO DAAS_CORE.TRIP_DETAIL
SELECT * FROM DAAS_TEMP.TRIP_DETAIL_20231204;


INSERT INTO DAAS_CORE.TRIP_MASTER
SELECT * FROM DAAS_TEMP.TRIP_MASTER_20231204;


INSERT INTO DAAS_CORE.TRIP_SUMMARY
SELECT * FROM DAAS_TEMP.TRIP_SUMMARY_BACKUP_20230703;


INSERT INTO DAAS_CORE.DAILY_ACTIVITY_SUMMARY
SELECT * FROM DAAS_TEMP.DAILY_ACTIVITY_SUMMARY_BACKUP_20230703;


INSERT INTO DAAS_CORE.TRIP_MERGE_PROCESSED
SELECT * FROM DAAS_TEMP.TRIP_MERGE_PROCESSED_BACKUP_20230703;


INSERT INTO DAAS_CORE.TRIP_MERGE_QUEUE
SELECT * FROM DAAS_TEMP.TRIP_MERGE_QUEUE_BKP_BACKUP_20230703;


INSERT INTO DAAS_CORE.TRIP_RECALC_PROCESSED
SELECT * FROM DAAS_TEMP.TRIP_RECALC_PROCESSED_BACKUP_20230703;


INSERT INTO DAAS_CORE.TRIP_RECALC_QUEUE
SELECT * FROM DAAS_TEMP.TRIP_RECALC_QUEUE_BACKUP_20230703;



5) Recreate Streams

CREATE OR REPLACE STREAM DAAS_CORE.TRIP_DETAIL_SUMMARY_STREAM ON TABLE DAAS_CORE.TRIP_DETAIL;
CREATE OR REPLACE STREAM DAAS_CORE.TRIP_MASTER_TRIP_MERGE_CHECK_STREAM ON TABLE DAAS_CORE.TRIP_MASTER;
CREATE OR REPLACE STREAM DAAS_CORE.TRIP_MASTER_TRIP_CUSTOMER_MERGE_CHECK_STREAM ON TABLE DAAS_CORE.TRIP_MASTER;
CREATE OR REPLACE STREAM DAAS_CORE.TRIP_MASTER_DAILY_SUMMARY_WRAPPER_STREAM ON TABLE DAAS_CORE.TRIP_MASTER;