

-- Step 1) Suspend the TRIP_ROOT_TASK 

ALTER TASK DAAS_COMMON.TRIP_ROOT_TASK SUSPEND;


-- Step 2) Take backup of Trip tables [Thru Standardized Proc - CLONE_TABLE_PROC]


CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'DAILY_ACTIVITY_SUMMARY', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_SUMMARY', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_DETAIL', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MASTER', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MERGE_PROCESSED', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_MERGE_QUEUE', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_RECALC_PROCESSED', NULL ,NULL);
CALL DAAS_SECURITY.CLONE_TABLE_PROC('DAAS_PROD', 'DAAS_PROD', 'DAAS_CORE', 'TRIP_RECALC_QUEUE', NULL ,NULL);



-- Step 3) Creating table to capture the Hotel Extra SKs



CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('CREATE OR REPLACE TABLE DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS AS
SELECT DISTINCT TM.TRIP_MASTER_ID,TD.TRANSACTION_TABLE_SK,DENSE_RANK() OVER(ORDER BY TM.TRIP_MASTER_ID) AS RANK
FROM DAAS_CORE.TRIP_MASTER TM
JOIN DAAS_CORE.TRIP_DETAIL TD
ON TM.TRIP_MASTER_ID = TD.TRIP_MASTER_ID
WHERE TM.DELETE_IND = \'N\'
AND TD.DELETE_IND = \'N\'
AND TD.TRANSACTION_TYPE = \'HOTEL\'
AND TM.GUEST_UNIQUE_ID <> -1
AND TRANSACTION_TABLE_SK NOT IN (SELECT HOTEL_GUEST_RESERVATION_FACT_SK FROM DAAS_CORE.HOTEL_GUEST_RESERVATION_FACT);');


	
--- Step 4) Run the count query to check if the cleanup needs to be performed in chunks


SELECT
	 COUNT(A.TRIP_MASTER_ID)
FROM
		DAAS_CORE.TRIP_MASTER A
JOIN DAAS_CORE.TRIP_DETAIL B
ON
		A.TRIP_MASTER_ID = B.TRIP_MASTER_ID
JOIN (SELECT 
		TM.TRIP_MASTER_ID
	FROM
		DAAS_CORE.TRIP_MASTER TM
	WHERE 
		TM.TRIP_MASTER_ID IN (SELECT DISTINCT TRIP_MASTER_ID FROM DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS)
	AND TM.DELETE_IND = 'N') C
ON
		A.TRIP_MASTER_ID = C.TRIP_MASTER_ID
WHERE
		 A.DELETE_IND = 'N'
	AND B.TRANSACTION_SUB_TYPE = 'OPENED';





--- Step 5) If the count is huge, divide the records into chunks


SELECT MAX(RANK) FROM DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS;


SELECT
	 COUNT(A.TRIP_MASTER_ID)
FROM
		DAAS_CORE.TRIP_MASTER A
JOIN DAAS_CORE.TRIP_DETAIL B
ON
		A.TRIP_MASTER_ID = B.TRIP_MASTER_ID
JOIN (SELECT 
		TM.TRIP_MASTER_ID
	FROM
		DAAS_CORE.TRIP_MASTER TM
	WHERE 
		TM.TRIP_MASTER_ID IN (SELECT DISTINCT TRIP_MASTER_ID FROM DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS WHERE RANK <= )
	AND TM.DELETE_IND = 'N') C
ON
		A.TRIP_MASTER_ID = C.TRIP_MASTER_ID
WHERE
		 A.DELETE_IND = 'N'
	AND B.TRANSACTION_SUB_TYPE = 'OPENED';	
	
	
-- Step 6) Run the Adhoc scripts to soft delete the extra SKs and recalculate the trips 

CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('UPDATE DAAS_CORE.TRIP_DETAIL
SET DELETE_IND = \'Y\', TRANSACTION_SUB_TYPE = \'VOIDED\'
WHERE TRANSACTION_TABLE_SK IN 
(SELECT DISTINCT TRANSACTION_TABLE_SK FROM DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS WHERE RANK <=?)
AND TRANSACTION_TYPE = \'HOTEL\'');


CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('INSERT INTO DAAS_CORE.TRIP_RECALC_QUEUE
( 
	TRIP_MASTER_ID,
	STATUS,
	BATCH_ID,
	CREATED_DTTM,
	CREATED_BY,
	UPDATED_DTTM,
	UPDATED_BY 
)
SELECT 
	TM.TRIP_MASTER_ID,
	\'PENDING\' AS STATUS,
	20231213,
	CURRENT_TIMESTAMP AS CREATED_DTTM,
	CURRENT_USER AS CREATED_BY,
	CURRENT_TIMESTAMP AS UPDATED_DTTM,
	CURRENT_USER AS UPDATED_BY
FROM
	DAAS_CORE.TRIP_MASTER TM
WHERE 
	TM.TRIP_MASTER_ID IN (SELECT DISTINCT TRIP_MASTER_ID FROM DAAS_TEMP.HOTEL_EXTRA_SKS_CLEANUP_TRIPS where rank <=?)
AND TM.DELETE_IND = \'N\';'
);



-- Step 7) Execute OnDemand tasks from Recalc to Trip Summary to cleanup these SKs [Thru OnDemand Tasks]

EXECUTE TASK DAAS_COMMON.TRIP_RECALCULATION_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_CHECK_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_GUEST_GUESTXREF_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_CHECK_TRIP_MASTER_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_CUSTOMER_MERGE_ONDEMAND_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_SUMMARY_WRAPPER_ONDEMAND_TASK;

-- Step 8)Validation:
 
SELECT COUNT(*) 
FROM DAAS_CORE.TRIP_DETAIL TD
JOIN DAAS_CORE.TRIP_MASTER TM
ON TD.TRIP_MASTER_ID = TM.TRIP_MASTER_ID
WHERE TRANSACTION_TABLE_SK NOT IN (SELECT DISTINCT HOTEL_GUEST_RESERVATIONS_FACT_SK FROM DAAS_CORE.HOTEL_GUEST_RESERVATIONS_FACT)
AND TD.TRANSACTION_TYPE = 'HOTEL'
AND TM.DELETE_IND = 'N'
AND TD.DELETE_IND = 'N'
AND TM.GUEST_UNIQUE_ID <> -1;
 

--- Step 9) RESUME The TRIP_ROOT_TASK 

ALTER TASK DAAS_COMMON.TRIP_ROOT_TASK RESUME;