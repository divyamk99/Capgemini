CREATE OR REPLACE PROCEDURE DAAS_ADHOC.TRIP_METRICS_MISMATCHES_COMP_ADHOC_REQUEST_PROC()
RETURNS VARCHAR NOT NULL
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS
$$

/*
#############################################################################################################
Author: Hemanth
Purpose: This procedure will capture discrepancy guests from COMP domain
Created Date: 08/30/2023
#############################################################################################################
*/

proc_output = "";
proc_step = "";

try
{
	snowflake.execute( {sqlText: "BEGIN;" } );

	/* Create temp table to store discrepancy Guests from TRIP_SUMMARY */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.COMP_TS_DISCREPANCY_GUEST_IDS AS 
	SELECT
	GUEST_UNIQUE_ID,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED ELSE 0 END) AS PROP_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED ELSE 0 END) AS MKT_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED ELSE 0 END) AS ENT_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS PROP_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS MKT_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS ENT_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS PROP_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS MKT_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS ENT_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS PROP_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS MKT_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS ENT_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED ELSE 0 END) AS PROP_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED ELSE 0 END) AS MKT_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED ELSE 0 END) AS ENT_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS PROP_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS MKT_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS ENT_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS PROP_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS MKT_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS ENT_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS PROP_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS MKT_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS ENT_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_FP_CONVERT ELSE 0 END) AS PROP_RC_FP_CONVERT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_FP_CONVERT ELSE 0 END) AS MKT_RC_FP_CONVERT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_FP_CONVERT ELSE 0 END) AS ENT_RC_FP_CONVERT
FROM
	DAAS_CORE_MARKETING_VW.TRIP_SUMMARY_VW
WHERE
	GUEST_UNIQUE_ID <> -1
GROUP BY 
	GUEST_UNIQUE_ID
HAVING 
( PROP_CW_DLRS_USED  <> MKT_CW_DLRS_USED  OR MKT_CW_DLRS_USED  <> ENT_CW_DLRS_USED  OR ENT_CW_DLRS_USED  <> PROP_CW_DLRS_USED ) OR
( PROP_CW_DLRS_USED_FOOD  <> MKT_CW_DLRS_USED_FOOD  OR MKT_CW_DLRS_USED_FOOD  <> ENT_CW_DLRS_USED_FOOD  OR ENT_CW_DLRS_USED_FOOD  <> PROP_CW_DLRS_USED_FOOD ) OR
( PROP_CW_DLRS_USED_ROOM  <> MKT_CW_DLRS_USED_ROOM  OR MKT_CW_DLRS_USED_ROOM  <> ENT_CW_DLRS_USED_ROOM  OR ENT_CW_DLRS_USED_ROOM  <> PROP_CW_DLRS_USED_ROOM ) OR
( PROP_CW_DLRS_USED_OTHER  <> MKT_CW_DLRS_USED_OTHER  OR MKT_CW_DLRS_USED_OTHER  <> ENT_CW_DLRS_USED_OTHER  OR ENT_CW_DLRS_USED_OTHER  <> PROP_CW_DLRS_USED_OTHER ) OR
( PROP_RC_DLRS_USED  <> MKT_RC_DLRS_USED  OR MKT_RC_DLRS_USED  <> ENT_RC_DLRS_USED  OR ENT_RC_DLRS_USED  <> PROP_RC_DLRS_USED ) OR
( PROP_RC_DLRS_USED_FOOD  <> MKT_RC_DLRS_USED_FOOD  OR MKT_RC_DLRS_USED_FOOD  <> ENT_RC_DLRS_USED_FOOD  OR ENT_RC_DLRS_USED_FOOD  <> PROP_RC_DLRS_USED_FOOD ) OR
( PROP_RC_DLRS_USED_ROOM  <> MKT_RC_DLRS_USED_ROOM  OR MKT_RC_DLRS_USED_ROOM  <> ENT_RC_DLRS_USED_ROOM  OR ENT_RC_DLRS_USED_ROOM  <> PROP_RC_DLRS_USED_ROOM ) OR
( PROP_RC_DLRS_USED_OTHER  <> MKT_RC_DLRS_USED_OTHER  OR MKT_RC_DLRS_USED_OTHER  <> ENT_RC_DLRS_USED_OTHER  OR ENT_RC_DLRS_USED_OTHER  <> PROP_RC_DLRS_USED_OTHER ) OR
( PROP_RC_FP_CONVERT  <> MKT_RC_FP_CONVERT  OR MKT_RC_FP_CONVERT  <> ENT_RC_FP_CONVERT  OR ENT_RC_FP_CONVERT  <> PROP_RC_FP_CONVERT );`});


	/* Create temp table to store discrepancy Guests from DAILY_ACTIVITY_SUMMARY */

	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.COMP_DAS_DISCREPANCY_GUEST_IDS AS
	SELECT
	GUEST_UNIQUE_ID,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED ELSE 0 END) AS PROP_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED ELSE 0 END) AS MKT_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED ELSE 0 END) AS ENT_CW_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS PROP_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS MKT_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_FOOD ELSE 0 END) AS ENT_CW_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS PROP_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS MKT_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_ROOM ELSE 0 END) AS ENT_CW_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS PROP_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS MKT_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN CW_DLRS_USED_OTHER ELSE 0 END) AS ENT_CW_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED ELSE 0 END) AS PROP_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED ELSE 0 END) AS MKT_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED ELSE 0 END) AS ENT_RC_DLRS_USED,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS PROP_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS MKT_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_FOOD ELSE 0 END) AS ENT_RC_DLRS_USED_FOOD,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS PROP_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS MKT_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_ROOM ELSE 0 END) AS ENT_RC_DLRS_USED_ROOM,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS PROP_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS MKT_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_DLRS_USED_OTHER ELSE 0 END) AS ENT_RC_DLRS_USED_OTHER,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN RC_FP_CONVERT ELSE 0 END) AS PROP_RC_FP_CONVERT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN RC_FP_CONVERT ELSE 0 END) AS MKT_RC_FP_CONVERT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN RC_FP_CONVERT ELSE 0 END) AS ENT_RC_FP_CONVERT
FROM
	DAAS_CORE_MARKETING_VW.DAILY_ACTIVITY_SUMMARY_VW
WHERE
	GUEST_UNIQUE_ID <> -1
GROUP BY 
	GUEST_UNIQUE_ID
HAVING 
( PROP_CW_DLRS_USED  <> MKT_CW_DLRS_USED  OR MKT_CW_DLRS_USED  <> ENT_CW_DLRS_USED  OR ENT_CW_DLRS_USED  <> PROP_CW_DLRS_USED ) OR
( PROP_CW_DLRS_USED_FOOD  <> MKT_CW_DLRS_USED_FOOD  OR MKT_CW_DLRS_USED_FOOD  <> ENT_CW_DLRS_USED_FOOD  OR ENT_CW_DLRS_USED_FOOD  <> PROP_CW_DLRS_USED_FOOD ) OR
( PROP_CW_DLRS_USED_ROOM  <> MKT_CW_DLRS_USED_ROOM  OR MKT_CW_DLRS_USED_ROOM  <> ENT_CW_DLRS_USED_ROOM  OR ENT_CW_DLRS_USED_ROOM  <> PROP_CW_DLRS_USED_ROOM ) OR
( PROP_CW_DLRS_USED_OTHER  <> MKT_CW_DLRS_USED_OTHER  OR MKT_CW_DLRS_USED_OTHER  <> ENT_CW_DLRS_USED_OTHER  OR ENT_CW_DLRS_USED_OTHER  <> PROP_CW_DLRS_USED_OTHER ) OR
( PROP_RC_DLRS_USED  <> MKT_RC_DLRS_USED  OR MKT_RC_DLRS_USED  <> ENT_RC_DLRS_USED  OR ENT_RC_DLRS_USED  <> PROP_RC_DLRS_USED ) OR
( PROP_RC_DLRS_USED_FOOD  <> MKT_RC_DLRS_USED_FOOD  OR MKT_RC_DLRS_USED_FOOD  <> ENT_RC_DLRS_USED_FOOD  OR ENT_RC_DLRS_USED_FOOD  <> PROP_RC_DLRS_USED_FOOD ) OR
( PROP_RC_DLRS_USED_ROOM  <> MKT_RC_DLRS_USED_ROOM  OR MKT_RC_DLRS_USED_ROOM  <> ENT_RC_DLRS_USED_ROOM  OR ENT_RC_DLRS_USED_ROOM  <> PROP_RC_DLRS_USED_ROOM ) OR
( PROP_RC_DLRS_USED_OTHER  <> MKT_RC_DLRS_USED_OTHER  OR MKT_RC_DLRS_USED_OTHER  <> ENT_RC_DLRS_USED_OTHER  OR ENT_RC_DLRS_USED_OTHER  <> PROP_RC_DLRS_USED_OTHER ) OR
( PROP_RC_FP_CONVERT  <> MKT_RC_FP_CONVERT  OR MKT_RC_FP_CONVERT  <> ENT_RC_FP_CONVERT  OR ENT_RC_FP_CONVERT  <> PROP_RC_FP_CONVERT );` } );	
	
	
	/* Combine both temp tables and get distinct Guests */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.COMP_DISCREPANCY_GUEST_IDS AS
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.COMP_TS_DISCREPANCY_GUEST_IDS
	UNION
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.COMP_DAS_DISCREPANCY_GUEST_IDS
	;` } );	
	

	snowflake.execute( {sqlText: "COMMIT;" } );

	proc_output = "SUCCESS";
}	

catch (err) 
{ 
snowflake.execute( {sqlText: "ROLLBACK;" } );

proc_output += "\n Failed: Code: " + err.code + "\n  State: " + err.state;
proc_output += "\n  Message: " + err.message;
proc_output += "\nStack Trace:\n" + err.stackTraceTxt;
}
 
return proc_output;
$$;