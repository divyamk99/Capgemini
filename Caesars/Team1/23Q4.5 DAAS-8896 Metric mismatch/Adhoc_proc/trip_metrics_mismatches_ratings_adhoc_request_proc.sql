CREATE OR REPLACE PROCEDURE DAAS_ADHOC.TRIP_METRICS_MISMATCHES_RATINGS_ADHOC_REQUEST_PROC()
RETURNS VARCHAR NOT NULL
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS
$$

/*
#############################################################################################################
Author: Surya Jangareddi
Purpose: This procedure will capture discrepancy guests from Ratings domain
Created Date: 08/30/2023
#############################################################################################################
*/

proc_output = "";
proc_step = "";

try
{
	snowflake.execute( {sqlText: "BEGIN;" } );

	/* Create temp table to store discrepancy Guests from TRIP_SUMMARY */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.RATINGS_TS_DISCREPANCY_GUEST_IDS AS 
	SELECT
		GUEST_UNIQUE_ID,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS PROP_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS MKT_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS ENT_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS PROP_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS MKT_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS ENT_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS PROP_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS MKT_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS ENT_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS PROP_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS MKT_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS ENT_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS PROP_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS MKT_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS ENT_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS PROP_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS MKT_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS ENT_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS PROP_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS MKT_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS ENT_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS PROP_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS MKT_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS ENT_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS PROP_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS MKT_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS ENT_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS PROP_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS MKT_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS ENT_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS PROP_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS MKT_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS ENT_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS PROP_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS MKT_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS ENT_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS PROP_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS MKT_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS ENT_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS PROP_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS MKT_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS ENT_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS PROP_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS MKT_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS ENT_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS PROP_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS MKT_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS ENT_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS PROP_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS MKT_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS ENT_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS PROP_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS MKT_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS ENT_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS PROP_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS MKT_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS ENT_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS PROP_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS MKT_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS ENT_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS PROP_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS MKT_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS ENT_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS PROP_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS MKT_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS ENT_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS PROP_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS MKT_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS ENT_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS PROP_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS MKT_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS ENT_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS PROP_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS MKT_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS ENT_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS PROP_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS MKT_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS ENT_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS PROP_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS MKT_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS ENT_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COUPON_USED ELSE 0 END) AS PROP_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COUPON_USED ELSE 0 END) AS MKT_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COUPON_USED ELSE 0 END) AS ENT_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_COUPON_USED ELSE 0 END) AS PROP_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_COUPON_USED ELSE 0 END) AS MKT_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_COUPON_USED ELSE 0 END) AS ENT_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COUPON_USED ELSE 0 END) AS PROP_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COUPON_USED ELSE 0 END) AS MKT_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COUPON_USED ELSE 0 END) AS ENT_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS PROP_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS MKT_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS ENT_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS PROP_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS MKT_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS ENT_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS PROP_OTHER_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS MKT_OTHER_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS ENT_OTHER_PROMO_CASHLESS 
	FROM
		DAAS_CORE_MARKETING_VW.TRIP_SUMMARY_VW
	WHERE
		GUEST_UNIQUE_ID <> -1
	GROUP BY 
		GUEST_UNIQUE_ID
	HAVING 
	( PROP_SLOT_TIME_PLAYED_IN_MIN  <> MKT_SLOT_TIME_PLAYED_IN_MIN  OR MKT_SLOT_TIME_PLAYED_IN_MIN  <> ENT_SLOT_TIME_PLAYED_IN_MIN  OR ENT_SLOT_TIME_PLAYED_IN_MIN  <> PROP_SLOT_TIME_PLAYED_IN_MIN ) OR
	( PROP_TABLE_TIME_PLAYED_IN_MIN <> MKT_TABLE_TIME_PLAYED_IN_MIN OR MKT_TABLE_TIME_PLAYED_IN_MIN <> ENT_TABLE_TIME_PLAYED_IN_MIN OR ENT_TABLE_TIME_PLAYED_IN_MIN <> PROP_TABLE_TIME_PLAYED_IN_MIN) OR
	( PROP_OTHER_TIME_PLAYED_IN_MIN <> MKT_OTHER_TIME_PLAYED_IN_MIN OR MKT_OTHER_TIME_PLAYED_IN_MIN <> ENT_OTHER_TIME_PLAYED_IN_MIN OR ENT_OTHER_TIME_PLAYED_IN_MIN <> PROP_OTHER_TIME_PLAYED_IN_MIN) OR
	( PROP_TABLE_BUY_IN_AMT <> MKT_TABLE_BUY_IN_AMT OR MKT_TABLE_BUY_IN_AMT <> ENT_TABLE_BUY_IN_AMT OR ENT_TABLE_BUY_IN_AMT <> PROP_TABLE_BUY_IN_AMT ) OR
	( PROP_SLOT_COIN_IN_AMT <> MKT_SLOT_COIN_IN_AMT OR MKT_SLOT_COIN_IN_AMT <> ENT_SLOT_COIN_IN_AMT OR ENT_SLOT_COIN_IN_AMT <> PROP_SLOT_COIN_IN_AMT ) OR
	( PROP_SLOT_COIN_OUT_AMT <> MKT_SLOT_COIN_OUT_AMT OR MKT_SLOT_COIN_OUT_AMT <> ENT_SLOT_COIN_OUT_AMT OR ENT_SLOT_COIN_OUT_AMT <> PROP_SLOT_COIN_OUT_AMT ) OR
	( PROP_TABLE_CASH_IN_AMT <> MKT_TABLE_CASH_IN_AMT OR MKT_TABLE_CASH_IN_AMT <> ENT_TABLE_CASH_IN_AMT OR ENT_TABLE_CASH_IN_AMT <> PROP_TABLE_CASH_IN_AMT ) OR
	( PROP_SLOT_BILLS_IN_AMT <> MKT_SLOT_BILLS_IN_AMT OR MKT_SLOT_BILLS_IN_AMT <> ENT_SLOT_BILLS_IN_AMT OR ENT_SLOT_BILLS_IN_AMT <> PROP_SLOT_BILLS_IN_AMT ) OR
	( PROP_OTHER_CASH_IN_AMT <> MKT_OTHER_CASH_IN_AMT OR MKT_OTHER_CASH_IN_AMT <> ENT_OTHER_CASH_IN_AMT OR ENT_OTHER_CASH_IN_AMT <> PROP_OTHER_CASH_IN_AMT ) OR
	( PROP_TABLE_COIN_OUT_AMT <> MKT_TABLE_COIN_OUT_AMT OR MKT_TABLE_COIN_OUT_AMT <> ENT_TABLE_COIN_OUT_AMT OR ENT_TABLE_COIN_OUT_AMT <> PROP_TABLE_COIN_OUT_AMT ) OR
	( PROP_OTHER_COIN_IN_AMT <> MKT_OTHER_COIN_IN_AMT OR MKT_OTHER_COIN_IN_AMT <> ENT_OTHER_COIN_IN_AMT OR ENT_OTHER_COIN_IN_AMT <> PROP_OTHER_COIN_IN_AMT ) OR
	( PROP_OTHER_COIN_OUT_AMT <> MKT_OTHER_COIN_OUT_AMT OR MKT_OTHER_COIN_OUT_AMT <> ENT_OTHER_COIN_OUT_AMT OR ENT_OTHER_COIN_OUT_AMT <> PROP_OTHER_COIN_OUT_AMT ) OR
	( PROP_SLOT_JACKPOT_AMT <> MKT_SLOT_JACKPOT_AMT OR MKT_SLOT_JACKPOT_AMT <> ENT_SLOT_JACKPOT_AMT OR ENT_SLOT_JACKPOT_AMT <> PROP_SLOT_JACKPOT_AMT ) OR
	( PROP_OTHER_JACKPOT_AMT <> MKT_OTHER_JACKPOT_AMT OR MKT_OTHER_JACKPOT_AMT <> ENT_OTHER_JACKPOT_AMT OR ENT_OTHER_JACKPOT_AMT <> PROP_OTHER_JACKPOT_AMT ) OR
	( PROP_SLOT_WIN_LOSS_AMT <> MKT_SLOT_WIN_LOSS_AMT OR MKT_SLOT_WIN_LOSS_AMT <> ENT_SLOT_WIN_LOSS_AMT OR ENT_SLOT_WIN_LOSS_AMT <> PROP_SLOT_WIN_LOSS_AMT ) OR
	( PROP_TABLE_WIN_LOSS_AMT <> MKT_TABLE_WIN_LOSS_AMT OR MKT_TABLE_WIN_LOSS_AMT <> ENT_TABLE_WIN_LOSS_AMT OR ENT_TABLE_WIN_LOSS_AMT <> PROP_TABLE_WIN_LOSS_AMT ) OR
	( PROP_OTHER_WIN_LOSS_AMT <> MKT_OTHER_WIN_LOSS_AMT OR MKT_OTHER_WIN_LOSS_AMT <> ENT_OTHER_WIN_LOSS_AMT OR ENT_OTHER_WIN_LOSS_AMT <> PROP_OTHER_WIN_LOSS_AMT ) OR
	( PROP_SLOT_THEO_WIN_AMT <> MKT_SLOT_THEO_WIN_AMT OR MKT_SLOT_THEO_WIN_AMT <> ENT_SLOT_THEO_WIN_AMT OR ENT_SLOT_THEO_WIN_AMT <> PROP_SLOT_THEO_WIN_AMT ) OR
	( PROP_TABLE_THEO_WIN_AMT <> MKT_TABLE_THEO_WIN_AMT OR MKT_TABLE_THEO_WIN_AMT <> ENT_TABLE_THEO_WIN_AMT OR ENT_TABLE_THEO_WIN_AMT <> PROP_TABLE_THEO_WIN_AMT ) OR
	( PROP_OTHER_THEO_WIN_AMT <> MKT_OTHER_THEO_WIN_AMT OR MKT_OTHER_THEO_WIN_AMT <> ENT_OTHER_THEO_WIN_AMT OR ENT_OTHER_THEO_WIN_AMT <> PROP_OTHER_THEO_WIN_AMT ) OR
	( PROP_TOTAL_THEO_WIN_AMT <> MKT_TOTAL_THEO_WIN_AMT OR MKT_TOTAL_THEO_WIN_AMT <> ENT_TOTAL_THEO_WIN_AMT OR ENT_TOTAL_THEO_WIN_AMT <> PROP_TOTAL_THEO_WIN_AMT ) OR
	( PROP_SLOT_POINTS_EARNED_AMT <> MKT_SLOT_POINTS_EARNED_AMT OR MKT_SLOT_POINTS_EARNED_AMT <> ENT_SLOT_POINTS_EARNED_AMT OR ENT_SLOT_POINTS_EARNED_AMT <> PROP_SLOT_POINTS_EARNED_AMT  ) OR
	( PROP_TABLE_POINTS_EARNED_AMT  <> MKT_TABLE_POINTS_EARNED_AMT  OR MKT_TABLE_POINTS_EARNED_AMT  <> ENT_TABLE_POINTS_EARNED_AMT  OR ENT_TABLE_POINTS_EARNED_AMT  <> PROP_TABLE_POINTS_EARNED_AMT ) OR
	( PROP_OTHER_POINTS_EARNED_AMT  <> MKT_OTHER_POINTS_EARNED_AMT  OR MKT_OTHER_POINTS_EARNED_AMT  <> ENT_OTHER_POINTS_EARNED_AMT  OR ENT_OTHER_POINTS_EARNED_AMT  <> PROP_OTHER_POINTS_EARNED_AMT ) OR
	( PROP_SLOT_HANDLE_PULLS <> MKT_SLOT_HANDLE_PULLS OR MKT_SLOT_HANDLE_PULLS <> ENT_SLOT_HANDLE_PULLS OR ENT_SLOT_HANDLE_PULLS <> PROP_SLOT_HANDLE_PULLS ) OR
	( PROP_OTHER_HANDLE_PULLS <> MKT_OTHER_HANDLE_PULLS OR MKT_OTHER_HANDLE_PULLS <> ENT_OTHER_HANDLE_PULLS OR ENT_OTHER_HANDLE_PULLS <> PROP_OTHER_HANDLE_PULLS ) OR
	( PROP_TABLE_TOTAL_HANDS_PLAYED <> MKT_TABLE_TOTAL_HANDS_PLAYED OR MKT_TABLE_TOTAL_HANDS_PLAYED <> ENT_TABLE_TOTAL_HANDS_PLAYED OR ENT_TABLE_TOTAL_HANDS_PLAYED <> PROP_TABLE_TOTAL_HANDS_PLAYED) OR
	( PROP_SLOT_COUPON_USED <> MKT_SLOT_COUPON_USED OR MKT_SLOT_COUPON_USED <> ENT_SLOT_COUPON_USED OR ENT_SLOT_COUPON_USED <> PROP_SLOT_COUPON_USED ) OR
	( PROP_TABLE_COUPON_USED <> MKT_TABLE_COUPON_USED OR MKT_TABLE_COUPON_USED <> ENT_TABLE_COUPON_USED OR ENT_TABLE_COUPON_USED <> PROP_TABLE_COUPON_USED ) OR
	( PROP_OTHER_COUPON_USED <> MKT_OTHER_COUPON_USED OR MKT_OTHER_COUPON_USED <> ENT_OTHER_COUPON_USED OR ENT_OTHER_COUPON_USED <> PROP_OTHER_COUPON_USED ) OR
	( PROP_SLOT_PROMO_CASHLESS <> MKT_SLOT_PROMO_CASHLESS OR MKT_SLOT_PROMO_CASHLESS <> ENT_SLOT_PROMO_CASHLESS OR ENT_SLOT_PROMO_CASHLESS <> PROP_SLOT_PROMO_CASHLESS ) OR
	( PROP_TABLE_PROMO_CASHLESS <> MKT_TABLE_PROMO_CASHLESS OR MKT_TABLE_PROMO_CASHLESS <> ENT_TABLE_PROMO_CASHLESS OR ENT_TABLE_PROMO_CASHLESS <> PROP_TABLE_PROMO_CASHLESS ) OR
	( PROP_OTHER_PROMO_CASHLESS <> MKT_OTHER_PROMO_CASHLESS OR MKT_OTHER_PROMO_CASHLESS <> ENT_OTHER_PROMO_CASHLESS OR ENT_OTHER_PROMO_CASHLESS <> PROP_OTHER_PROMO_CASHLESS )
	` } );


	/* Create temp table to store discrepancy Guests from DAILY_ACTIVITY_SUMMARY */

	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.RATINGS_DAS_DISCREPANCY_GUEST_IDS AS
	SELECT
		GUEST_UNIQUE_ID,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS PROP_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS MKT_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_TIME_PLAYED_IN_MIN  ELSE 0 END) AS ENT_SLOT_TIME_PLAYED_IN_MIN ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS PROP_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS MKT_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_TIME_PLAYED_IN_MIN ELSE 0 END) AS ENT_TABLE_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS PROP_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS MKT_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_TIME_PLAYED_IN_MIN ELSE 0 END) AS ENT_OTHER_TIME_PLAYED_IN_MIN,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS PROP_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS MKT_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_BUY_IN_AMT ELSE 0 END) AS ENT_TABLE_BUY_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS PROP_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS MKT_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COIN_IN_AMT ELSE 0 END) AS ENT_SLOT_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS PROP_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS MKT_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COIN_OUT_AMT ELSE 0 END) AS ENT_SLOT_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS PROP_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS MKT_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_CASH_IN_AMT ELSE 0 END) AS ENT_TABLE_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS PROP_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS MKT_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_BILLS_IN_AMT ELSE 0 END) AS ENT_SLOT_BILLS_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS PROP_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS MKT_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_CASH_IN_AMT ELSE 0 END) AS ENT_OTHER_CASH_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS PROP_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS MKT_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_COIN_OUT_AMT ELSE 0 END) AS ENT_TABLE_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS PROP_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS MKT_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COIN_IN_AMT ELSE 0 END) AS ENT_OTHER_COIN_IN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS PROP_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS MKT_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COIN_OUT_AMT ELSE 0 END) AS ENT_OTHER_COIN_OUT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS PROP_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS MKT_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_JACKPOT_AMT ELSE 0 END) AS ENT_SLOT_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS PROP_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS MKT_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_JACKPOT_AMT ELSE 0 END) AS ENT_OTHER_JACKPOT_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS PROP_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS MKT_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_WIN_LOSS_AMT ELSE 0 END) AS ENT_SLOT_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS PROP_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS MKT_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_WIN_LOSS_AMT ELSE 0 END) AS ENT_TABLE_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS PROP_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS MKT_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_WIN_LOSS_AMT ELSE 0 END) AS ENT_OTHER_WIN_LOSS_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS PROP_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS MKT_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_THEO_WIN_AMT ELSE 0 END) AS ENT_SLOT_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS PROP_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS MKT_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_THEO_WIN_AMT ELSE 0 END) AS ENT_TABLE_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS PROP_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS MKT_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_THEO_WIN_AMT ELSE 0 END) AS ENT_OTHER_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS PROP_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS MKT_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TOTAL_THEO_WIN_AMT ELSE 0 END) AS ENT_TOTAL_THEO_WIN_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS PROP_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS MKT_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_POINTS_EARNED_AMT ELSE 0 END) AS ENT_SLOT_POINTS_EARNED_AMT  ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS PROP_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS MKT_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_POINTS_EARNED_AMT  ELSE 0 END) AS ENT_TABLE_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS PROP_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS MKT_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_POINTS_EARNED_AMT  ELSE 0 END) AS ENT_OTHER_POINTS_EARNED_AMT ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS PROP_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS MKT_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_HANDLE_PULLS ELSE 0 END) AS ENT_SLOT_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS PROP_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS MKT_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_HANDLE_PULLS ELSE 0 END) AS ENT_OTHER_HANDLE_PULLS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS PROP_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS MKT_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_TOTAL_HANDS_PLAYED ELSE 0 END) AS ENT_TABLE_TOTAL_HANDS_PLAYED,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_COUPON_USED ELSE 0 END) AS PROP_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_COUPON_USED ELSE 0 END) AS MKT_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_COUPON_USED ELSE 0 END) AS ENT_SLOT_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_COUPON_USED ELSE 0 END) AS PROP_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_COUPON_USED ELSE 0 END) AS MKT_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_COUPON_USED ELSE 0 END) AS ENT_TABLE_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_COUPON_USED ELSE 0 END) AS PROP_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_COUPON_USED ELSE 0 END) AS MKT_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_COUPON_USED ELSE 0 END) AS ENT_OTHER_COUPON_USED ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS PROP_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS MKT_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN SLOT_PROMO_CASHLESS ELSE 0 END) AS ENT_SLOT_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS PROP_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS MKT_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN TABLE_PROMO_CASHLESS ELSE 0 END) AS ENT_TABLE_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS PROP_OTHER_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS MKT_OTHER_PROMO_CASHLESS ,
		SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN OTHER_PROMO_CASHLESS ELSE 0 END) AS ENT_OTHER_PROMO_CASHLESS 
	FROM
		DAAS_CORE_MARKETING_VW.DAILY_ACTIVITY_SUMMARY_VW
	WHERE
		GUEST_UNIQUE_ID <> -1
	GROUP BY 
		GUEST_UNIQUE_ID
	HAVING 
	( PROP_SLOT_TIME_PLAYED_IN_MIN  <> MKT_SLOT_TIME_PLAYED_IN_MIN  OR MKT_SLOT_TIME_PLAYED_IN_MIN  <> ENT_SLOT_TIME_PLAYED_IN_MIN  OR ENT_SLOT_TIME_PLAYED_IN_MIN  <> PROP_SLOT_TIME_PLAYED_IN_MIN ) OR
	( PROP_TABLE_TIME_PLAYED_IN_MIN <> MKT_TABLE_TIME_PLAYED_IN_MIN OR MKT_TABLE_TIME_PLAYED_IN_MIN <> ENT_TABLE_TIME_PLAYED_IN_MIN OR ENT_TABLE_TIME_PLAYED_IN_MIN <> PROP_TABLE_TIME_PLAYED_IN_MIN) OR
	( PROP_OTHER_TIME_PLAYED_IN_MIN <> MKT_OTHER_TIME_PLAYED_IN_MIN OR MKT_OTHER_TIME_PLAYED_IN_MIN <> ENT_OTHER_TIME_PLAYED_IN_MIN OR ENT_OTHER_TIME_PLAYED_IN_MIN <> PROP_OTHER_TIME_PLAYED_IN_MIN) OR
	( PROP_TABLE_BUY_IN_AMT <> MKT_TABLE_BUY_IN_AMT OR MKT_TABLE_BUY_IN_AMT <> ENT_TABLE_BUY_IN_AMT OR ENT_TABLE_BUY_IN_AMT <> PROP_TABLE_BUY_IN_AMT ) OR
	( PROP_SLOT_COIN_IN_AMT <> MKT_SLOT_COIN_IN_AMT OR MKT_SLOT_COIN_IN_AMT <> ENT_SLOT_COIN_IN_AMT OR ENT_SLOT_COIN_IN_AMT <> PROP_SLOT_COIN_IN_AMT ) OR
	( PROP_SLOT_COIN_OUT_AMT <> MKT_SLOT_COIN_OUT_AMT OR MKT_SLOT_COIN_OUT_AMT <> ENT_SLOT_COIN_OUT_AMT OR ENT_SLOT_COIN_OUT_AMT <> PROP_SLOT_COIN_OUT_AMT ) OR
	( PROP_TABLE_CASH_IN_AMT <> MKT_TABLE_CASH_IN_AMT OR MKT_TABLE_CASH_IN_AMT <> ENT_TABLE_CASH_IN_AMT OR ENT_TABLE_CASH_IN_AMT <> PROP_TABLE_CASH_IN_AMT ) OR
	( PROP_SLOT_BILLS_IN_AMT <> MKT_SLOT_BILLS_IN_AMT OR MKT_SLOT_BILLS_IN_AMT <> ENT_SLOT_BILLS_IN_AMT OR ENT_SLOT_BILLS_IN_AMT <> PROP_SLOT_BILLS_IN_AMT ) OR
	( PROP_OTHER_CASH_IN_AMT <> MKT_OTHER_CASH_IN_AMT OR MKT_OTHER_CASH_IN_AMT <> ENT_OTHER_CASH_IN_AMT OR ENT_OTHER_CASH_IN_AMT <> PROP_OTHER_CASH_IN_AMT ) OR
	( PROP_TABLE_COIN_OUT_AMT <> MKT_TABLE_COIN_OUT_AMT OR MKT_TABLE_COIN_OUT_AMT <> ENT_TABLE_COIN_OUT_AMT OR ENT_TABLE_COIN_OUT_AMT <> PROP_TABLE_COIN_OUT_AMT ) OR
	( PROP_OTHER_COIN_IN_AMT <> MKT_OTHER_COIN_IN_AMT OR MKT_OTHER_COIN_IN_AMT <> ENT_OTHER_COIN_IN_AMT OR ENT_OTHER_COIN_IN_AMT <> PROP_OTHER_COIN_IN_AMT ) OR
	( PROP_OTHER_COIN_OUT_AMT <> MKT_OTHER_COIN_OUT_AMT OR MKT_OTHER_COIN_OUT_AMT <> ENT_OTHER_COIN_OUT_AMT OR ENT_OTHER_COIN_OUT_AMT <> PROP_OTHER_COIN_OUT_AMT ) OR
	( PROP_SLOT_JACKPOT_AMT <> MKT_SLOT_JACKPOT_AMT OR MKT_SLOT_JACKPOT_AMT <> ENT_SLOT_JACKPOT_AMT OR ENT_SLOT_JACKPOT_AMT <> PROP_SLOT_JACKPOT_AMT ) OR
	( PROP_OTHER_JACKPOT_AMT <> MKT_OTHER_JACKPOT_AMT OR MKT_OTHER_JACKPOT_AMT <> ENT_OTHER_JACKPOT_AMT OR ENT_OTHER_JACKPOT_AMT <> PROP_OTHER_JACKPOT_AMT ) OR
	( PROP_SLOT_WIN_LOSS_AMT <> MKT_SLOT_WIN_LOSS_AMT OR MKT_SLOT_WIN_LOSS_AMT <> ENT_SLOT_WIN_LOSS_AMT OR ENT_SLOT_WIN_LOSS_AMT <> PROP_SLOT_WIN_LOSS_AMT ) OR
	( PROP_TABLE_WIN_LOSS_AMT <> MKT_TABLE_WIN_LOSS_AMT OR MKT_TABLE_WIN_LOSS_AMT <> ENT_TABLE_WIN_LOSS_AMT OR ENT_TABLE_WIN_LOSS_AMT <> PROP_TABLE_WIN_LOSS_AMT ) OR
	( PROP_OTHER_WIN_LOSS_AMT <> MKT_OTHER_WIN_LOSS_AMT OR MKT_OTHER_WIN_LOSS_AMT <> ENT_OTHER_WIN_LOSS_AMT OR ENT_OTHER_WIN_LOSS_AMT <> PROP_OTHER_WIN_LOSS_AMT ) OR
	( PROP_SLOT_THEO_WIN_AMT <> MKT_SLOT_THEO_WIN_AMT OR MKT_SLOT_THEO_WIN_AMT <> ENT_SLOT_THEO_WIN_AMT OR ENT_SLOT_THEO_WIN_AMT <> PROP_SLOT_THEO_WIN_AMT ) OR
	( PROP_TABLE_THEO_WIN_AMT <> MKT_TABLE_THEO_WIN_AMT OR MKT_TABLE_THEO_WIN_AMT <> ENT_TABLE_THEO_WIN_AMT OR ENT_TABLE_THEO_WIN_AMT <> PROP_TABLE_THEO_WIN_AMT ) OR
	( PROP_OTHER_THEO_WIN_AMT <> MKT_OTHER_THEO_WIN_AMT OR MKT_OTHER_THEO_WIN_AMT <> ENT_OTHER_THEO_WIN_AMT OR ENT_OTHER_THEO_WIN_AMT <> PROP_OTHER_THEO_WIN_AMT ) OR
	( PROP_TOTAL_THEO_WIN_AMT <> MKT_TOTAL_THEO_WIN_AMT OR MKT_TOTAL_THEO_WIN_AMT <> ENT_TOTAL_THEO_WIN_AMT OR ENT_TOTAL_THEO_WIN_AMT <> PROP_TOTAL_THEO_WIN_AMT ) OR
	( PROP_SLOT_POINTS_EARNED_AMT <> MKT_SLOT_POINTS_EARNED_AMT OR MKT_SLOT_POINTS_EARNED_AMT <> ENT_SLOT_POINTS_EARNED_AMT OR ENT_SLOT_POINTS_EARNED_AMT <> PROP_SLOT_POINTS_EARNED_AMT  ) OR
	( PROP_TABLE_POINTS_EARNED_AMT  <> MKT_TABLE_POINTS_EARNED_AMT  OR MKT_TABLE_POINTS_EARNED_AMT  <> ENT_TABLE_POINTS_EARNED_AMT  OR ENT_TABLE_POINTS_EARNED_AMT  <> PROP_TABLE_POINTS_EARNED_AMT ) OR
	( PROP_OTHER_POINTS_EARNED_AMT  <> MKT_OTHER_POINTS_EARNED_AMT  OR MKT_OTHER_POINTS_EARNED_AMT  <> ENT_OTHER_POINTS_EARNED_AMT  OR ENT_OTHER_POINTS_EARNED_AMT  <> PROP_OTHER_POINTS_EARNED_AMT ) OR
	( PROP_SLOT_HANDLE_PULLS <> MKT_SLOT_HANDLE_PULLS OR MKT_SLOT_HANDLE_PULLS <> ENT_SLOT_HANDLE_PULLS OR ENT_SLOT_HANDLE_PULLS <> PROP_SLOT_HANDLE_PULLS ) OR
	( PROP_OTHER_HANDLE_PULLS <> MKT_OTHER_HANDLE_PULLS OR MKT_OTHER_HANDLE_PULLS <> ENT_OTHER_HANDLE_PULLS OR ENT_OTHER_HANDLE_PULLS <> PROP_OTHER_HANDLE_PULLS ) OR
	( PROP_TABLE_TOTAL_HANDS_PLAYED <> MKT_TABLE_TOTAL_HANDS_PLAYED OR MKT_TABLE_TOTAL_HANDS_PLAYED <> ENT_TABLE_TOTAL_HANDS_PLAYED OR ENT_TABLE_TOTAL_HANDS_PLAYED <> PROP_TABLE_TOTAL_HANDS_PLAYED) OR
	( PROP_SLOT_COUPON_USED <> MKT_SLOT_COUPON_USED OR MKT_SLOT_COUPON_USED <> ENT_SLOT_COUPON_USED OR ENT_SLOT_COUPON_USED <> PROP_SLOT_COUPON_USED ) OR
	( PROP_TABLE_COUPON_USED <> MKT_TABLE_COUPON_USED OR MKT_TABLE_COUPON_USED <> ENT_TABLE_COUPON_USED OR ENT_TABLE_COUPON_USED <> PROP_TABLE_COUPON_USED ) OR
	( PROP_OTHER_COUPON_USED <> MKT_OTHER_COUPON_USED OR MKT_OTHER_COUPON_USED <> ENT_OTHER_COUPON_USED OR ENT_OTHER_COUPON_USED <> PROP_OTHER_COUPON_USED ) OR
	( PROP_SLOT_PROMO_CASHLESS <> MKT_SLOT_PROMO_CASHLESS OR MKT_SLOT_PROMO_CASHLESS <> ENT_SLOT_PROMO_CASHLESS OR ENT_SLOT_PROMO_CASHLESS <> PROP_SLOT_PROMO_CASHLESS ) OR
	( PROP_TABLE_PROMO_CASHLESS <> MKT_TABLE_PROMO_CASHLESS OR MKT_TABLE_PROMO_CASHLESS <> ENT_TABLE_PROMO_CASHLESS OR ENT_TABLE_PROMO_CASHLESS <> PROP_TABLE_PROMO_CASHLESS ) OR
	( PROP_OTHER_PROMO_CASHLESS <> MKT_OTHER_PROMO_CASHLESS OR MKT_OTHER_PROMO_CASHLESS <> ENT_OTHER_PROMO_CASHLESS OR ENT_OTHER_PROMO_CASHLESS <> PROP_OTHER_PROMO_CASHLESS )
	;` } );	
	
	
	/* Combine both temp tables and get distinct Guests */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.RATINGS_DISCREPANCY_GUEST_IDS AS
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.RATINGS_TS_DISCREPANCY_GUEST_IDS
	UNION
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.RATINGS_DAS_DISCREPANCY_GUEST_IDS
	;` } );	
	

	snowflake.execute( {sqlText: "COMMIT;" } );

	proc_output = "SUCCESS";
}	

catch (err) 
{ 
snowflake.execute( {sqlText: "ROLLBACK;" } );

proc_output += "\n Failed: Code: " + err.code + "\n  State: " + err.state;
proc_output += "\n  Message: " + err.message;
proc_output += "\nStack Trace:\n" + err.stackTraceTxt;
}
 
return proc_output;
$$;