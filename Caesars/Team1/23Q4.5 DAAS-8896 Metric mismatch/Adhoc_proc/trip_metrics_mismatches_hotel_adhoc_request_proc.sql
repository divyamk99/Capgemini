CREATE OR REPLACE PROCEDURE DAAS_ADHOC.TRIP_METRICS_MISMATCHES_HOTEL_ADHOC_REQUEST_PROC()
RETURNS VARCHAR NOT NULL
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS
$$

/*
#############################################################################################################
Author: Priyanka V
Purpose: This procedure will capture discrepancy guests from hotel domain
Created Date: 08/30/2023
#############################################################################################################
*/

proc_output = "";
proc_step = "";

try
{
	snowflake.execute( {sqlText: "BEGIN;" } );

	/* Create temp table to store discrepancy Guests from TRIP_SUMMARY */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.HOTEL_TS_DISCREPANCY_GUEST_IDS AS 
	SELECT
	GUEST_UNIQUE_ID,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS PROP_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS MKT_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS ENT_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS PROP_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS MKT_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS ENT_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS PROP_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS MKT_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS ENT_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS PROP_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS MKT_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS ENT_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS PROP_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS MKT_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS ENT_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_ROOM_AMT ELSE 0 END) AS PROP_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_ROOM_AMT ELSE 0 END) AS MKT_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_ROOM_AMT ELSE 0 END) AS ENT_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS PROP_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS MKT_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS ENT_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_ROOM_TAX ELSE 0 END) AS PROP_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_ROOM_TAX ELSE 0 END) AS MKT_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_ROOM_TAX ELSE 0 END) AS ENT_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_OTHER_TAX ELSE 0 END) AS PROP_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_OTHER_TAX ELSE 0 END) AS MKT_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_OTHER_TAX ELSE 0 END) AS ENT_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TIP_AMT ELSE 0 END) AS PROP_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TIP_AMT ELSE 0 END) AS MKT_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TIP_AMT ELSE 0 END) AS ENT_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_COMP_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_COMP_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_COMP_TKT_OTHER_AMT
FROM
	DAAS_CORE_MARKETING_VW.TRIP_SUMMARY_VW
WHERE
	GUEST_UNIQUE_ID <> -1
GROUP BY 
	GUEST_UNIQUE_ID
HAVING 
( PROP_HOTEL_COMP_ROOM_AMT  <> MKT_HOTEL_COMP_ROOM_AMT  OR MKT_HOTEL_COMP_ROOM_AMT  <> ENT_HOTEL_COMP_ROOM_AMT  OR ENT_HOTEL_COMP_ROOM_AMT  <> PROP_HOTEL_COMP_ROOM_AMT ) OR
( PROP_HOTEL_COMP_OTHER_AMT <> MKT_HOTEL_COMP_OTHER_AMT OR MKT_HOTEL_COMP_OTHER_AMT <> ENT_HOTEL_COMP_OTHER_AMT OR ENT_HOTEL_COMP_OTHER_AMT <> PROP_HOTEL_COMP_OTHER_AMT  ) OR
( PROP_HOTEL_COMP_AMT_TOTAL <> MKT_HOTEL_COMP_AMT_TOTAL OR MKT_HOTEL_COMP_AMT_TOTAL <> ENT_HOTEL_COMP_AMT_TOTAL OR ENT_HOTEL_COMP_AMT_TOTAL <> PROP_HOTEL_COMP_AMT_TOTAL  ) OR
( PROP_HOTEL_COMP_ROOM_TAX  <> MKT_HOTEL_COMP_ROOM_TAX  OR MKT_HOTEL_COMP_ROOM_TAX  <> ENT_HOTEL_COMP_ROOM_TAX  OR ENT_HOTEL_COMP_ROOM_TAX  <> PROP_HOTEL_COMP_ROOM_TAX ) OR
( PROP_HOTEL_COMP_OTHER_TAX <> MKT_HOTEL_COMP_OTHER_TAX OR MKT_HOTEL_COMP_OTHER_TAX <> ENT_HOTEL_COMP_OTHER_TAX OR ENT_HOTEL_COMP_OTHER_TAX <> PROP_HOTEL_COMP_OTHER_TAX  ) OR
( PROP_HOTEL_ROOM_AMT <> MKT_HOTEL_ROOM_AMT OR MKT_HOTEL_ROOM_AMT <> ENT_HOTEL_ROOM_AMT OR ENT_HOTEL_ROOM_AMT <> PROP_HOTEL_ROOM_AMT ) OR
( PROP_HOTEL_OTHER_AMT <> MKT_HOTEL_OTHER_AMT OR MKT_HOTEL_OTHER_AMT <> ENT_HOTEL_OTHER_AMT OR ENT_HOTEL_OTHER_AMT <> PROP_HOTEL_OTHER_AMT ) OR
( PROP_HOTEL_AMT_TOTAL <> MKT_HOTEL_AMT_TOTAL OR MKT_HOTEL_AMT_TOTAL <> ENT_HOTEL_AMT_TOTAL OR ENT_HOTEL_AMT_TOTAL <> PROP_HOTEL_AMT_TOTAL ) OR
( PROP_HOTEL_ROOM_TAX <> MKT_HOTEL_ROOM_TAX OR MKT_HOTEL_ROOM_TAX <> ENT_HOTEL_ROOM_TAX OR ENT_HOTEL_ROOM_TAX <> PROP_HOTEL_ROOM_TAX ) OR
( PROP_HOTEL_OTHER_TAX <> MKT_HOTEL_OTHER_TAX OR MKT_HOTEL_OTHER_TAX <> ENT_HOTEL_OTHER_TAX OR ENT_HOTEL_OTHER_TAX <> PROP_HOTEL_OTHER_TAX ) OR
( PROP_HOTEL_TIP_AMT  <> MKT_HOTEL_TIP_AMT  OR MKT_HOTEL_TIP_AMT  <> ENT_HOTEL_TIP_AMT  OR ENT_HOTEL_TIP_AMT  <> PROP_HOTEL_TIP_AMT ) OR
( PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT <> MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT OR MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT <> ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT OR ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT <> PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT  ) OR
( PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  OR MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  OR ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ) OR
( PROP_HOTEL_TKT_OTHER_AMT  <> MKT_HOTEL_TKT_OTHER_AMT  OR MKT_HOTEL_TKT_OTHER_AMT  <> ENT_HOTEL_TKT_OTHER_AMT  OR ENT_HOTEL_TKT_OTHER_AMT  <> PROP_HOTEL_TKT_OTHER_AMT ) OR
( PROP_HOTEL_COMP_TKT_OTHER_AMT <> MKT_HOTEL_COMP_TKT_OTHER_AMT OR MKT_HOTEL_COMP_TKT_OTHER_AMT <> ENT_HOTEL_COMP_TKT_OTHER_AMT OR ENT_HOTEL_COMP_TKT_OTHER_AMT <> PROP_HOTEL_COMP_TKT_OTHER_AMT 
);` } );


	/* Create temp table to store discrepancy Guests from DAILY_ACTIVITY_SUMMARY */

	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.HOTEL_DAS_DISCREPANCY_GUEST_IDS AS
	SELECT
	GUEST_UNIQUE_ID,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS PROP_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS MKT_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_ROOM_AMT ELSE 0 END) AS ENT_HOTEL_COMP_ROOM_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS PROP_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS MKT_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_OTHER_AMT  ELSE 0 END) AS ENT_HOTEL_COMP_OTHER_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS PROP_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS MKT_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_AMT_TOTAL  ELSE 0 END) AS ENT_HOTEL_COMP_AMT_TOTAL ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS PROP_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS MKT_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_ROOM_TAX ELSE 0 END) AS ENT_HOTEL_COMP_ROOM_TAX,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS PROP_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS MKT_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_OTHER_TAX  ELSE 0 END) AS ENT_HOTEL_COMP_OTHER_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_ROOM_AMT ELSE 0 END) AS PROP_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_ROOM_AMT ELSE 0 END) AS MKT_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_ROOM_AMT ELSE 0 END) AS ENT_HOTEL_ROOM_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_OTHER_AMT    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS PROP_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS MKT_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_AMT_TOTAL ELSE 0 END) AS ENT_HOTEL_AMT_TOTAL    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_ROOM_TAX ELSE 0 END) AS PROP_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_ROOM_TAX ELSE 0 END) AS MKT_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_ROOM_TAX ELSE 0 END) AS ENT_HOTEL_ROOM_TAX ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_OTHER_TAX ELSE 0 END) AS PROP_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_OTHER_TAX ELSE 0 END) AS MKT_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_OTHER_TAX ELSE 0 END) AS ENT_HOTEL_OTHER_TAX    ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TIP_AMT ELSE 0 END) AS PROP_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TIP_AMT ELSE 0 END) AS MKT_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TIP_AMT ELSE 0 END) AS ENT_HOTEL_TIP_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TKT_FOOD_BEVERAGE_AMT  ELSE 0 END) AS ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT ,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ELSE 0 END) AS ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_TKT_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'PROPERTY' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS PROP_HOTEL_COMP_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'MARKET' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS MKT_HOTEL_COMP_TKT_OTHER_AMT,
	SUM(CASE WHEN TRIP_TYPE = 'ENTERPRISE' THEN HOTEL_COMP_TKT_OTHER_AMT ELSE 0 END) AS ENT_HOTEL_COMP_TKT_OTHER_AMT
FROM
	DAAS_CORE_MARKETING_VW.DAILY_ACTIVITY_SUMMARY_VW
WHERE
	GUEST_UNIQUE_ID <> -1
GROUP BY 
	GUEST_UNIQUE_ID
HAVING 
( PROP_HOTEL_COMP_ROOM_AMT  <> MKT_HOTEL_COMP_ROOM_AMT  OR MKT_HOTEL_COMP_ROOM_AMT  <> ENT_HOTEL_COMP_ROOM_AMT  OR ENT_HOTEL_COMP_ROOM_AMT  <> PROP_HOTEL_COMP_ROOM_AMT ) OR
( PROP_HOTEL_COMP_OTHER_AMT <> MKT_HOTEL_COMP_OTHER_AMT OR MKT_HOTEL_COMP_OTHER_AMT <> ENT_HOTEL_COMP_OTHER_AMT OR ENT_HOTEL_COMP_OTHER_AMT <> PROP_HOTEL_COMP_OTHER_AMT  ) OR
( PROP_HOTEL_COMP_AMT_TOTAL <> MKT_HOTEL_COMP_AMT_TOTAL OR MKT_HOTEL_COMP_AMT_TOTAL <> ENT_HOTEL_COMP_AMT_TOTAL OR ENT_HOTEL_COMP_AMT_TOTAL <> PROP_HOTEL_COMP_AMT_TOTAL  ) OR
( PROP_HOTEL_COMP_ROOM_TAX  <> MKT_HOTEL_COMP_ROOM_TAX  OR MKT_HOTEL_COMP_ROOM_TAX  <> ENT_HOTEL_COMP_ROOM_TAX  OR ENT_HOTEL_COMP_ROOM_TAX  <> PROP_HOTEL_COMP_ROOM_TAX ) OR
( PROP_HOTEL_COMP_OTHER_TAX <> MKT_HOTEL_COMP_OTHER_TAX OR MKT_HOTEL_COMP_OTHER_TAX <> ENT_HOTEL_COMP_OTHER_TAX OR ENT_HOTEL_COMP_OTHER_TAX <> PROP_HOTEL_COMP_OTHER_TAX  ) OR
( PROP_HOTEL_ROOM_AMT <> MKT_HOTEL_ROOM_AMT OR MKT_HOTEL_ROOM_AMT <> ENT_HOTEL_ROOM_AMT OR ENT_HOTEL_ROOM_AMT <> PROP_HOTEL_ROOM_AMT ) OR
( PROP_HOTEL_OTHER_AMT <> MKT_HOTEL_OTHER_AMT OR MKT_HOTEL_OTHER_AMT <> ENT_HOTEL_OTHER_AMT OR ENT_HOTEL_OTHER_AMT <> PROP_HOTEL_OTHER_AMT ) OR
( PROP_HOTEL_AMT_TOTAL <> MKT_HOTEL_AMT_TOTAL OR MKT_HOTEL_AMT_TOTAL <> ENT_HOTEL_AMT_TOTAL OR ENT_HOTEL_AMT_TOTAL <> PROP_HOTEL_AMT_TOTAL ) OR
( PROP_HOTEL_ROOM_TAX <> MKT_HOTEL_ROOM_TAX OR MKT_HOTEL_ROOM_TAX <> ENT_HOTEL_ROOM_TAX OR ENT_HOTEL_ROOM_TAX <> PROP_HOTEL_ROOM_TAX ) OR
( PROP_HOTEL_OTHER_TAX <> MKT_HOTEL_OTHER_TAX OR MKT_HOTEL_OTHER_TAX <> ENT_HOTEL_OTHER_TAX OR ENT_HOTEL_OTHER_TAX <> PROP_HOTEL_OTHER_TAX ) OR
( PROP_HOTEL_TIP_AMT  <> MKT_HOTEL_TIP_AMT  OR MKT_HOTEL_TIP_AMT  <> ENT_HOTEL_TIP_AMT  OR ENT_HOTEL_TIP_AMT  <> PROP_HOTEL_TIP_AMT ) OR
( PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT <> MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT OR MKT_HOTEL_TKT_FOOD_BEVERAGE_AMT <> ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT OR ENT_HOTEL_TKT_FOOD_BEVERAGE_AMT <> PROP_HOTEL_TKT_FOOD_BEVERAGE_AMT  ) OR
( PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  OR MKT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  OR ENT_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT  <> PROP_HOTEL_COMP_TKT_FOOD_BEVERAGE_AMT ) OR
( PROP_HOTEL_TKT_OTHER_AMT  <> MKT_HOTEL_TKT_OTHER_AMT  OR MKT_HOTEL_TKT_OTHER_AMT  <> ENT_HOTEL_TKT_OTHER_AMT  OR ENT_HOTEL_TKT_OTHER_AMT  <> PROP_HOTEL_TKT_OTHER_AMT ) OR
( PROP_HOTEL_COMP_TKT_OTHER_AMT <> MKT_HOTEL_COMP_TKT_OTHER_AMT OR MKT_HOTEL_COMP_TKT_OTHER_AMT <> ENT_HOTEL_COMP_TKT_OTHER_AMT OR ENT_HOTEL_COMP_TKT_OTHER_AMT <> PROP_HOTEL_COMP_TKT_OTHER_AMT 
);` } );
	
	
	/* Combine both temp tables and get distinct Guests */
	
	snowflake.execute( {sqlText: `
	CREATE OR REPLACE TABLE DAAS_TEMP.HOTEL_DISCREPANCY_GUEST_IDS AS
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.HOTEL_TS_DISCREPANCY_GUEST_IDS
	UNION
	SELECT GUEST_UNIQUE_ID FROM DAAS_TEMP.HOTEL_DAS_DISCREPANCY_GUEST_IDS
	;` } );	
	

	snowflake.execute( {sqlText: "COMMIT;" } );

	proc_output = "SUCCESS";
}	

catch (err) 
{ 
snowflake.execute( {sqlText: "ROLLBACK;" } );

proc_output += "\n Failed: Code: " + err.code + "\n  State: " + err.state;
proc_output += "\n  Message: " + err.message;
proc_output += "\nStack Trace:\n" + err.stackTraceTxt;
}
 
return proc_output;
$$;