--Check no task running for offer
ALTER TASK DAAS_COMMON.TRIP_ROOT_TASK SUSPEND;
ALTER TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_HISTORY_FACT_TASK SUSPEND;
ALTER TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_FACT_TASK SUSPEND;


-- Step 1:- Code check-in & Deploy the procedure "pdb_offer_ledger_fact_purge_history_load_proc.sql" in PROD by taking code from UAT.

common/daas_common/ddl/procedure/core/pdb_offer_ledger_fact_purge_history_load_proc.sql,procedure


-- Step 2:- Check the DELETE_IND for below scenarios - [it should be Y..Need to replay if it is N]

// Scenario 1: -- No issues found with this scenario in PROD. Hence, ignore

SELECT DISTINCT DELETE_IND FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN 
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK 
  FROM 
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN ('R','X')
   AND CURRENT_STATUS_IND = 'Y'
   AND DELETE_IND = 'Y'
)
AND TRANSACTION_TYPE = 'OFFER';



// Scenario 2:

SELECT DISTINCT DELETE_IND FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN 
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK 
  FROM 
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN ('R','X')
   AND CURRENT_STATUS_IND = 'N'
   AND DELETE_IND = 'Y'
)
AND TRANSACTION_TYPE = 'OFFER';



-- Step 3:- Get the Active SKs for scenario #2.. (Not required for Scenario #1)

SELECT COUNT(DISTINCT TRANSACTION_TABLE_SK) FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN 
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK 
  FROM 
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN ('R','X')
   AND CURRENT_STATUS_IND = 'N'
   AND DELETE_IND = 'Y'
)
AND TRANSACTION_TYPE = 'OFFER'
AND DELETE_IND = 'N'; -- 831



-- Step 4:- Capture the active SKs into temp table

CALL DAAS_ADHOC.ADHOC_SQL_EXECUTE('
CREATE OR REPLACE TABLE DAAS_TEMP.OFFER_FIX AS
SELECT DISTINCT TRANSACTION_TABLE_SK FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK
  FROM
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN (''R'',''X'')
   AND CURRENT_STATUS_IND = ''N''
   AND DELETE_IND = ''Y''
)
AND TRANSACTION_TYPE = ''OFFER''
AND DELETE_IND = ''N''
');



-- Step 5:- Replay the captured SKs from OFFER_LEDGER_FACT_HISTORY

CALL DAAS_COMMON.DATA_REPLAY_PROC('DAAS_CORE', 'OFFER_LEDGER_FACT_HISTORY', 
'WHERE OFFER_LEDGER_FACT_SK IN (SELECT TRANSACTION_TABLE_SK FROM DAAS_TEMP.OFFER_FIX)', 
'OFFER_PURGE', 1000000000);



-- Step 6:- Execute Offer_ledger_history_root_task & Trip_Root_Task Manually

EXECUTE TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_HISTORY_FACT_TASK;
EXECUTE TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_FACT_TASK;
EXECUTE TASK DAAS_COMMON.TRIP_ROOT_TASK;

-- Step 7:- Validate the trips if the records are soft deleted in below cases:

1) DELETE_IND = Y, CURRENT_STATUS_IND = Y, OFFER_STATUS_CD = R, X
2) DELETE_IND = Y, CURRENT_STATUS_IND = N, OFFER_STATUS_CD = R, X


// Scenario 1: 

SELECT DISTINCT DELETE_IND FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN 
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK 
  FROM 
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN ('R','X')
   AND CURRENT_STATUS_IND = 'Y'
   AND DELETE_IND = 'Y'
)
AND TRANSACTION_TYPE = 'OFFER';



// Scenario 2:

SELECT DISTINCT DELETE_IND FROM DAAS_CORE.TRIP_DETAIL
WHERE TRANSACTION_TABLE_SK IN 
(
  SELECT DISTINCT OFFER_LEDGER_FACT_SK 
  FROM 
    DAAS_CORE.OFFER_LEDGER_FACT_HISTORY
  WHERE
       OFFER_STATUS_CD IN ('R','X')
   AND CURRENT_STATUS_IND = 'N'
   AND DELETE_IND = 'Y'
)
AND TRANSACTION_TYPE = 'OFFER';

--Resume task
ALTER TASK DAAS_COMMON.TRIP_ROOT_TASK RESUME;
ALTER TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_HISTORY_FACT_TASK RESUME;
ALTER TASK DAAS_COMMON.RAW2CORE_PDB_OFFER_LEDGER_FACT_TASK RESUME;

--Job monitoring
SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_FILTERED_TXNS

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- RATINGS

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- HOTEL

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- POS

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- OFFER

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- COMP

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- MARKERS

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- FREEPLAY

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_RECALCULATION

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_MERGE_CHECK

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_MERGE

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_CUSTOMER_MERGE_CHECK_GUEST_GUESTXREF

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_CUSTOMER_MERGE_CHECK_TRIP_MASTER

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_CUSTOMER_MERGE

SELECT * FROM DAAS_COMMON.BATCH_S02 WHERE JOB_ID =  ORDER BY BATCH_ID DESC; -- TRIP_SUMMARY_WRAPPER

