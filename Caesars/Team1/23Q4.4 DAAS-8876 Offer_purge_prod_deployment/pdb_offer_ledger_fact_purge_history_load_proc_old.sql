CREATE OR REPLACE PROCEDURE DAAS_COMMON.PDB_OFFER_LEDGER_FACT_PURGE_HISTORY_LOAD_PROC
(
	BATCH_ID FLOAT,
	SHARD_NAME VARCHAR,
	WAREHOUSE_NAME VARCHAR, 
	CUSTOM_PARAM1 VARCHAR, 
	CUSTOM_PARAM2 VARCHAR
)
RETURNS VARCHAR NOT NULL
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER 
AS
$$

/*
#####################################################################################
Author: Nikhil Katariya
Purpose: Load history data from DAAS_UAT.DAAS_CORE.OFFER_LEDGER_FACT table to DAAS_UAT.DAAS_CORE.OFFER_LEDGER_FACT_HISTORY table
Input Parameters: None
Output Value: SUCCESS for successful execution and FAILURE for failed execution 
Created Date: 16/09/2022
Created By: Nikhil Katariya
Modified Date: 
Modified By: 
Version: 1.0
#####################################################################################
*/

	var proc_output = "";

try { 

snowflake.execute( {sqlText: "BEGIN;" } );

/* to get session_query_tag by concatenating batch_id and procedure name*/
snowflake.execute( {sqlText: "USE WAREHOUSE " + WAREHOUSE_NAME + " " } );

var query_tag = snowflake.execute( {sqlText: "SELECT CONCAT('" + BATCH_ID + "','_PDB_OFFER_LEDGER_FACT_PURGE_HISTORY_LOAD_PROC')" } );

query_tag.next();

var tag = query_tag.getColumnValue(1);

snowflake.execute( {sqlText: "ALTER SESSION SET QUERY_TAG = '" + tag + "'" } );

var Proc_Step = "";

Proc_Step = "Data_Process";



var get_Source_Rec_Count = snowflake.execute( {sqlText:"SELECT COUNT(*) FROM DAAS_CORE.OFFER_LEDGER_FACT WHERE (PURGE_FLG = 1 OR DELETE_IND = 'Y' OR CURRENT_STATUS_IND = 'N')"} );

get_Source_Rec_Count.next();

Source_Rec_Count = get_Source_Rec_Count.getColumnValue(1);


var my_sql_command_0 = 
` 	CREATE OR REPLACE TABLE DAAS_TEMP.OFFER_LEDGER_FACT_HISTORY_TEMP AS
	SELECT * 
	FROM DAAS_CORE.OFFER_LEDGER_FACT
	WHERE (OFFER_LEDGER_FACT.PURGE_FLG = 1 
	OR OFFER_LEDGER_FACT.DELETE_IND = 'Y'
	OR OFFER_LEDGER_FACT.CURRENT_STATUS_IND = 'N') ;`

/* Insert data into OFFER_LEDGER_FACT_HISTORY from OFFER_LEDGER_FACT */

    
var my_sql_command_1 = 
` MERGE INTO DAAS_CORE.OFFER_LEDGER_FACT_HISTORY OFFER_LEDGER_FACT_HISTORY
USING (
SELECT OFFER_LEDGER_FACT_HISTORY_TEMP.* 
	FROM DAAS_TEMP.OFFER_LEDGER_FACT_HISTORY_TEMP) OFFER_LEDGER_FACT_HISTORY_TEMP
	ON OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_OFFER_NBR = OFFER_LEDGER_FACT_HISTORY.GUEST_OFFER_NBR
	/* AND OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_UNIQUE_ID =  OFFER_LEDGER_FACT_HISTORY.GUEST_UNIQUE_ID */
	AND OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_ID  = OFFER_LEDGER_FACT_HISTORY.OFFER_ID
	AND NVL(OFFER_LEDGER_FACT_HISTORY_TEMP.COLLATERAL_ID,'') = NVL(OFFER_LEDGER_FACT_HISTORY.COLLATERAL_ID,'')
	AND NVL(OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_TYPE ,'') = NVL(OFFER_LEDGER_FACT_HISTORY.COUPON_TYPE,'')
	AND NVL(OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_ID,'')  = NVL(OFFER_LEDGER_FACT_HISTORY.COUPON_ID,'')
	AND NVL(OFFER_LEDGER_FACT_HISTORY_TEMP.VALID_PROPERTY_CD,'')  = NVL(OFFER_LEDGER_FACT_HISTORY.VALID_PROPERTY_CD,'')
	AND OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_CD  = OFFER_LEDGER_FACT_HISTORY.OFFER_STATUS_CD	
WHEN NOT MATCHED THEN
INSERT
(
OFFER_LEDGER_FACT_SK,
GUEST_OFFER_NBR,
GUEST_UNIQUE_ID,
OFFER_ID,
COLLATERAL_ID,
COUPON_TYPE,
COUPON_ID,
VALID_PROPERTY_CD,
OFFER_STATUS_CD,
PROPERTY_ID,
GUEST_ID,
OFFER_STATUS_DESC,
REDEMPTION_DT,
CURRENT_STATUS_IND,
RECIPIENT_GROUP_ID,
OFFER_STATUS_DT,
OFFER_SENT_DT,
REDEEMED_COUPON_CNT,
PARADB_LIST_ID,
MAIL_ID,
SOURCE_UPDATED_TIMESTAMP,
REDEEM_AMT,
REDEEM_AMOUNT_SOURCE_CD,
REDEEM_CHANNEL_CD,
PDB_TRIP_ID,
COUPON_KEY,
SOURCE_UPDATED_BY,
SOURCE_UPDATED_TIMESTAMP_REDEEMED,
OFFER_WORTH,
PURGE_DT,
PURGE_FLG,
SOURCE_SYSTEM_NM,
TIME_ZONE,
GST_OFFER_SENT_RAW_BATCH_ID,
GST_OFFER_RSV_RDM_RAW_BATCH_ID,
OFFER_LEDGER_FACT_BATCH_ID,
BATCH_ID,
CREATED_DTTM,
CREATED_BY,
UPDATED_DTTM,
UPDATED_BY,
DELETE_IND,
LAST_DML_CD,
REDEEM_AMT_COST_ADJUSTED,
REPLAY_COUNTER
)
VALUES 
(
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_LEDGER_FACT_SK,
OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_OFFER_NBR,
OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_UNIQUE_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.COLLATERAL_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_TYPE,
OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.VALID_PROPERTY_CD,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_CD,
OFFER_LEDGER_FACT_HISTORY_TEMP.PROPERTY_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_DESC,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEMPTION_DT,
OFFER_LEDGER_FACT_HISTORY_TEMP.CURRENT_STATUS_IND,
OFFER_LEDGER_FACT_HISTORY_TEMP.RECIPIENT_GROUP_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_DT,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_SENT_DT,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEMED_COUPON_CNT,
OFFER_LEDGER_FACT_HISTORY_TEMP.PARADB_LIST_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.MAIL_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_TIMESTAMP,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMT,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMOUNT_SOURCE_CD,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_CHANNEL_CD,
OFFER_LEDGER_FACT_HISTORY_TEMP.PDB_TRIP_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_KEY,
OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_BY,
OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_TIMESTAMP_REDEEMED,
OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_WORTH,
OFFER_LEDGER_FACT_HISTORY_TEMP.PURGE_DT,
OFFER_LEDGER_FACT_HISTORY_TEMP.PURGE_FLG,
OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_SYSTEM_NM,
OFFER_LEDGER_FACT_HISTORY_TEMP.TIME_ZONE,
OFFER_LEDGER_FACT_HISTORY_TEMP.GST_OFFER_SENT_RAW_BATCH_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.GST_OFFER_RSV_RDM_RAW_BATCH_ID,
OFFER_LEDGER_FACT_HISTORY_TEMP.BATCH_ID,
`+BATCH_ID+`,
OFFER_LEDGER_FACT_HISTORY_TEMP.CREATED_DTTM,
OFFER_LEDGER_FACT_HISTORY_TEMP.CREATED_BY,
OFFER_LEDGER_FACT_HISTORY_TEMP.UPDATED_DTTM,
OFFER_LEDGER_FACT_HISTORY_TEMP.UPDATED_BY,
OFFER_LEDGER_FACT_HISTORY_TEMP.DELETE_IND,
OFFER_LEDGER_FACT_HISTORY_TEMP.LAST_DML_CD,
OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMT_COST_ADJUSTED,
OFFER_LEDGER_FACT_HISTORY_TEMP.REPLAY_COUNTER
)
WHEN MATCHED THEN
UPDATE SET
OFFER_LEDGER_FACT_HISTORY.OFFER_LEDGER_FACT_SK  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_LEDGER_FACT_SK,
OFFER_LEDGER_FACT_HISTORY.GUEST_OFFER_NBR  =  OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_OFFER_NBR,
OFFER_LEDGER_FACT_HISTORY.GUEST_UNIQUE_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_UNIQUE_ID,
OFFER_LEDGER_FACT_HISTORY.OFFER_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_ID,
OFFER_LEDGER_FACT_HISTORY.COLLATERAL_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.COLLATERAL_ID,
OFFER_LEDGER_FACT_HISTORY.COUPON_TYPE  =  OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_TYPE,
OFFER_LEDGER_FACT_HISTORY.COUPON_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_ID,
OFFER_LEDGER_FACT_HISTORY.VALID_PROPERTY_CD  =  OFFER_LEDGER_FACT_HISTORY_TEMP.VALID_PROPERTY_CD,
OFFER_LEDGER_FACT_HISTORY.OFFER_STATUS_CD  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_CD,
OFFER_LEDGER_FACT_HISTORY.PROPERTY_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.PROPERTY_ID,
OFFER_LEDGER_FACT_HISTORY.GUEST_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.GUEST_ID,
OFFER_LEDGER_FACT_HISTORY.OFFER_STATUS_DESC  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_DESC,
OFFER_LEDGER_FACT_HISTORY.REDEMPTION_DT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEMPTION_DT,
OFFER_LEDGER_FACT_HISTORY.CURRENT_STATUS_IND  =  OFFER_LEDGER_FACT_HISTORY_TEMP.CURRENT_STATUS_IND,
OFFER_LEDGER_FACT_HISTORY.RECIPIENT_GROUP_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.RECIPIENT_GROUP_ID,
OFFER_LEDGER_FACT_HISTORY.OFFER_STATUS_DT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_STATUS_DT,
OFFER_LEDGER_FACT_HISTORY.OFFER_SENT_DT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_SENT_DT,
OFFER_LEDGER_FACT_HISTORY.REDEEMED_COUPON_CNT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEMED_COUPON_CNT,
OFFER_LEDGER_FACT_HISTORY.PARADB_LIST_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.PARADB_LIST_ID,
OFFER_LEDGER_FACT_HISTORY.MAIL_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.MAIL_ID,
OFFER_LEDGER_FACT_HISTORY.SOURCE_UPDATED_TIMESTAMP  =  OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_TIMESTAMP,
OFFER_LEDGER_FACT_HISTORY.REDEEM_AMT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMT,
OFFER_LEDGER_FACT_HISTORY.REDEEM_AMOUNT_SOURCE_CD  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMOUNT_SOURCE_CD,
OFFER_LEDGER_FACT_HISTORY.REDEEM_CHANNEL_CD  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_CHANNEL_CD,
OFFER_LEDGER_FACT_HISTORY.PDB_TRIP_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.PDB_TRIP_ID,
OFFER_LEDGER_FACT_HISTORY.COUPON_KEY  =  OFFER_LEDGER_FACT_HISTORY_TEMP.COUPON_KEY,
OFFER_LEDGER_FACT_HISTORY.SOURCE_UPDATED_BY  =  OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_BY,
OFFER_LEDGER_FACT_HISTORY.SOURCE_UPDATED_TIMESTAMP_REDEEMED  =  OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_UPDATED_TIMESTAMP_REDEEMED,
OFFER_LEDGER_FACT_HISTORY.OFFER_WORTH  =  OFFER_LEDGER_FACT_HISTORY_TEMP.OFFER_WORTH,
OFFER_LEDGER_FACT_HISTORY.PURGE_DT  =  OFFER_LEDGER_FACT_HISTORY_TEMP.PURGE_DT,
OFFER_LEDGER_FACT_HISTORY.PURGE_FLG  =  OFFER_LEDGER_FACT_HISTORY_TEMP.PURGE_FLG,
OFFER_LEDGER_FACT_HISTORY.SOURCE_SYSTEM_NM  =  OFFER_LEDGER_FACT_HISTORY_TEMP.SOURCE_SYSTEM_NM,
OFFER_LEDGER_FACT_HISTORY.TIME_ZONE  =  OFFER_LEDGER_FACT_HISTORY_TEMP.TIME_ZONE,
OFFER_LEDGER_FACT_HISTORY.GST_OFFER_SENT_RAW_BATCH_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.GST_OFFER_SENT_RAW_BATCH_ID,
OFFER_LEDGER_FACT_HISTORY.GST_OFFER_RSV_RDM_RAW_BATCH_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.GST_OFFER_RSV_RDM_RAW_BATCH_ID,
OFFER_LEDGER_FACT_HISTORY.OFFER_LEDGER_FACT_BATCH_ID  =  OFFER_LEDGER_FACT_HISTORY_TEMP.BATCH_ID,
OFFER_LEDGER_FACT_HISTORY.BATCH_ID  =  `+BATCH_ID+`,
OFFER_LEDGER_FACT_HISTORY.CREATED_DTTM  =  OFFER_LEDGER_FACT_HISTORY_TEMP.CREATED_DTTM,
OFFER_LEDGER_FACT_HISTORY.CREATED_BY  =  OFFER_LEDGER_FACT_HISTORY_TEMP.CREATED_BY,
OFFER_LEDGER_FACT_HISTORY.UPDATED_DTTM  =  OFFER_LEDGER_FACT_HISTORY_TEMP.UPDATED_DTTM,
OFFER_LEDGER_FACT_HISTORY.UPDATED_BY  =  OFFER_LEDGER_FACT_HISTORY_TEMP.UPDATED_BY,
OFFER_LEDGER_FACT_HISTORY.DELETE_IND  =  OFFER_LEDGER_FACT_HISTORY_TEMP.DELETE_IND,
OFFER_LEDGER_FACT_HISTORY.LAST_DML_CD  =  OFFER_LEDGER_FACT_HISTORY_TEMP.LAST_DML_CD,
OFFER_LEDGER_FACT_HISTORY.REDEEM_AMT_COST_ADJUSTED  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REDEEM_AMT_COST_ADJUSTED,
OFFER_LEDGER_FACT_HISTORY.REPLAY_COUNTER  =  OFFER_LEDGER_FACT_HISTORY_TEMP.REPLAY_COUNTER
	 `;
        
var statement0 = snowflake.createStatement( {sqlText: my_sql_command_0 } );
statement0.execute();

var statement1 = snowflake.createStatement( {sqlText: my_sql_command_1 } );
statement1.execute();
		
		
var del_cmd = `DELETE FROM DAAS_CORE.OFFER_LEDGER_FACT WHERE (PURGE_FLG = 1 OR DELETE_IND = 'Y' OR CURRENT_STATUS_IND = 'N')`;
        
var del_statement = snowflake.createStatement({sqlText:del_cmd}).execute();

proc_output = "SUCCESS";


/*Commit the Data Process Step */
snowflake.execute( {sqlText: "COMMIT;" } );

Proc_Step = "Update_Metrics";

/*Identify Raw Record_Count based on batch_id*/
var get_Raw_Count = snowflake.execute( {sqlText: "SELECT COUNT(*) FROM DAAS_CORE.OFFER_LEDGER_FACT_HISTORY WHERE BATCH_ID = "+BATCH_ID+""});

get_Raw_Count.next();

Raw_Insert_Count = get_Raw_Count.getColumnValue(1); 

/*Call Update_Batch_Metrics for each inserting each count metrics*/
var call_source_rec_count = snowflake.execute({sqlText: "CALL DAAS_COMMON.BATCH_CONTROL_UPDATE_BATCH_METRICS_PROC('" + BATCH_ID + "' , '" + SHARD_NAME + "','Source_Rec_Count','" + Source_Rec_Count + "');" });
var call_raw_insert_count = snowflake.execute({sqlText: "CALL DAAS_COMMON.BATCH_CONTROL_UPDATE_BATCH_METRICS_PROC('" + BATCH_ID + "' , '" + SHARD_NAME + "','Raw_Insert_Count','" + Raw_Insert_Count + "');" }); 


call_source_rec_count.next();

call_raw_insert_count.next();

var get_val_source_count = call_source_rec_count.getColumnValue(1);

var get_val_raw_insert_count = call_raw_insert_count.getColumnValue(1);

/*Error Handling if Metrics Update Failed*/
if (get_val_source_count.includes("SUCCESS") != true || get_val_raw_insert_count.includes("SUCCESS") != true) 
{ proc_output = "SOURCE COUNT METRIC STATUS: " + get_val_source_count + "\nRAW INSERT COUNT METRIC STATUS: " + get_val_raw_insert_count + "\nFAILURE RETURNED FROM METRICS";

}

else { proc_output = "SUCCESS";

} 
/*Commit the Update_Metrics Step */
snowflake.execute( {sqlText: "COMMIT;" } );

}

/*Below exception Handling Code can be reused in all stg to raw procedures as it is not specific to a procedure*/
catch (err) { proc_output = "FAILURE";

error_code = "Failed: Code: " + err.code + "  State: " + err.state;

error_message = "\n  Message: " + err.message + "\nStack Trace:\n" + err.stackTraceTxt;

error_message = error_message.replace(/["']/g, "");
if (Proc_Step == "Data_Process") { snowflake.execute( {sqlText: "ROLLBACK;" } )
/*CALL UPDATE_BATCH_ERROR_LOG*/
var sql_cmd = snowflake.execute( {sqlText:"CALL DAAS_COMMON.BATCH_CONTROL_UPDATE_BATCH_ERROR_LOG_PROC ('" + BATCH_ID + "','" + SHARD_NAME + "','" + error_code + "','" + error_message + "','','','FATAL','" + tag + "' || '_' || '" + Proc_Step +"')" });
}
else {
snowflake.execute( {sqlText: "COMMIT;" } );
/*CALL UPDATE_BATCH_ERROR_LOG*/
var sql_cmd = snowflake.execute( {sqlText:"CALL DAAS_COMMON.BATCH_CONTROL_UPDATE_BATCH_ERROR_LOG_PROC ('" + BATCH_ID + "','" + SHARD_NAME + "','" + error_code + "','" + error_message + "','','',' INFORMATIONAL',  '" + tag + "' || '_' || '" + Proc_Step +"')" });
} } return proc_output;
$$;